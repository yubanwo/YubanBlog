<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>渝伴的小窝</title>
  
  <subtitle>寻找属于自己的宁静角落</subtitle>
  <link href="https://blog.osyb.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.osyb.cn/"/>
  <updated>2025-07-20T08:21:55.705Z</updated>
  <id>https://blog.osyb.cn/</id>
  
  <author>
    <name>Yuban</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用 Qexo 管理 Hexo 博客，实现 GitHub 自动部署一条龙</title>
    <link href="https://blog.osyb.cn/posts/wz-14/"/>
    <id>https://blog.osyb.cn/posts/wz-14/</id>
    <published>2025-07-20T07:43:24.344Z</published>
    <updated>2025-07-20T08:21:55.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 是一款广受欢迎的静态博客框架，但默认使用本地命令行进行文章编写和部署，使用门槛略高。本文将介绍如何借助 Qexo 构建一个图形化的 Hexo 后台管理界面，并结合 GitHub Actions 实现自动部署，打造“一条龙”博客写作与发布流程。</p><hr><h2 id="项目亮点"><a href="#项目亮点" class="headerlink" title="项目亮点"></a>项目亮点</h2><ul><li><strong>图形化后台</strong>：Qexo 提供 Web 编辑器，支持可视化写作与管理文章</li><li><strong>自动化部署</strong>：每次提交文章后自动触发 GitHub Actions，实现自动部署</li><li><strong>免本地操作</strong>：无需命令行，打开浏览器即可完成写作、提交与部署流程</li></ul><hr><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>请先参考上一篇文章 <a href="https://blog.osyb.cn/posts/wz-13/">使用 GitHub Actions 自动部署 Hexo 博客</a>，完成 Hexo 博客的 GitHub Pages 自动部署配置。</p><hr><h2 id="二、部署-Qexo-后台"><a href="#二、部署-Qexo-后台" class="headerlink" title="二、部署 Qexo 后台"></a>二、部署 Qexo 后台</h2><p><strong>Qexo</strong> 是一个快速、强大、美观的在线 <strong>静态博客编辑器</strong>。</p><h3 id="1-安装-Qexo"><a href="#1-安装-Qexo" class="headerlink" title="1. 安装 Qexo"></a>1. 安装 Qexo</h3><p>详细安装方法请参考 <a href="https://oplog.cn/">Qexo 官方文档</a>。</p><h3 id="2-配置-Qexo"><a href="#2-配置-Qexo" class="headerlink" title="2. 配置 Qexo"></a>2. 配置 Qexo</h3><p>如果你已按照上一篇文章部署了 Hexo 和 GitHub 仓库，以下是 Qexo 的推荐配置：</p><ul><li><strong>GitHub 密钥</strong>：<code>PERSONAL_TOKEN</code>（建议使用具有 repo 权限的 Token）</li><li><strong>GitHub 仓库</strong>：<code>用户名/hexo</code>（如：<code>osyb/hexo</code>）</li><li><strong>项目分支</strong>：<code>main</code></li><li><strong>博客路径</strong>：留空（默认根目录即可）</li></ul><p>配置界面如下所示：</p><p><img src="https://cdn.osyb.cn/img/2025/07/b28eaf7e06377570d37914fc7f11d463.png/blog" alt="Qexo 配置界面截图"></p><hr><h2 id="三、使用流程演示"><a href="#三、使用流程演示" class="headerlink" title="三、使用流程演示"></a>三、使用流程演示</h2><ol><li>打开 Qexo 后台，点击“新建文章”进行写作</li><li>保存后，文章自动写入 Hexo 的 <code>_posts</code> 目录</li><li>提交改动并推送至 GitHub 仓库</li><li>GitHub Actions 自动构建并部署到服务器，博客即可更新</li></ol><hr><h2 id="项目地址参考"><a href="#项目地址参考" class="headerlink" title="项目地址参考"></a>项目地址参考</h2><ul><li><a href="https://hexo.io/">Hexo 官网</a></li><li><a href="https://github.com/Qexo/Qexo">Qexo GitHub 仓库</a></li><li><a href="https://docs.github.com/en/actions">GitHub Actions 官方文档</a></li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过结合 Qexo 与 GitHub Actions，我们构建了一个高效、现代化的博客管理系统。从写作到发布无需借助本地终端，打开浏览器即可完成一切操作，极大地提升了 Hexo 博客的可用性与维护效率。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr><p><img src="https://cdn.osyb.cn/img/2025/07/cb4a3aae8d234beee9999f54d139c418.png/blog"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hexo 是一款广受欢迎的静态博客框架，但默认使用本地命令行进行文章编写和部署，使用门槛略高。本文将介绍如何借助 Qexo 构建一个图形化的</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.osyb.cn/categories/Hexo/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/Hexo/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="GitHub Actions" scheme="https://blog.osyb.cn/tags/GitHub-Actions/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Actions 自动部署 Hexo 博客</title>
    <link href="https://blog.osyb.cn/posts/wz-13/"/>
    <id>https://blog.osyb.cn/posts/wz-13/</id>
    <published>2025-07-19T06:14:11.819Z</published>
    <updated>2025-07-20T08:22:56.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 是一个快速、简洁且高效的静态博客框架，适合技术类博客搭建。通过 GitHub Actions，我们可以实现代码提交后自动构建并部署博客，彻底告别手动部署，提升效率。</p><hr><h2 id="一、创建-GitHub-仓库"><a href="#一、创建-GitHub-仓库" class="headerlink" title="一、创建 GitHub 仓库"></a>一、创建 GitHub 仓库</h2><p>登录 <a href="https://github.com/">GitHub</a>，点击右上角的 <code>+</code>，选择 <a href="https://github.com/new">New repository</a>。</p><p><img src="https://cdn.osyb.cn/img/2025/07/4d685dec82a1424ba0e8f25b2b0abe03.png/blog" alt="新建仓库"></p><p>填写内容如下：</p><ul><li><strong>Repository name</strong>：自定义你的仓库名，例如 <code>hexo</code></li><li><strong>Visibility</strong>：选择 <code>Private</code>（私有）</li><li>其他选项保持默认，点击 <strong>Create repository</strong></li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/2f14cfa0c28a4ef4f5e12133b7b7809c.png/blog" alt="仓库信息"></p><hr><h2 id="二、初始化-Hexo-项目"><a href="#二、初始化-Hexo-项目" class="headerlink" title="二、初始化 Hexo 项目"></a>二、初始化 Hexo 项目</h2><p>打开命令行工具（CMD、终端或 PowerShell），执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 Hexo CLI 工具</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录下初始化 Hexo 项目，创建 blog 文件夹</span></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 blog 项目目录</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><blockquote><p>💡 如果你是 macOS 用户，也可以使用 Homebrew 安装 Hexo：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Homebrew安装Hexo </span></span><br><span class="line">brew install hexo  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录下初始化 Hexo 项目，创建 blog 文件夹 </span></span><br><span class="line">hexo init blog  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 blog 项目目录 </span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>初始化成功后，<code>blog</code> 文件夹结构如下：</p><p><img src="https://cdn.osyb.cn/img/2025/07/60991312c89f2609dc14755e74faa8d8.png/blog" alt="blog结构"></p><hr><h2 id="三、配置-GitHub-Token（权限）"><a href="#三、配置-GitHub-Token（权限）" class="headerlink" title="三、配置 GitHub Token（权限）"></a>三、配置 GitHub Token（权限）</h2><p>登录 GitHub，依次进入：</p><p><code>Settings</code> → <code>Developer Settings</code> → <code>Personal access tokens</code> → <code>Tokens (classic)</code>，点击 <a href="https://github.com/settings/tokens/new">Generate new token (classic)</a></p><p><img src="https://cdn.osyb.cn/img/2025/07/16c71d315666a533ba2561dc05981753.png/blog" alt="创建 token"></p><p>配置如下：</p><ul><li><strong>Note</strong>：如 <code>hexo-blog-token</code></li><li><strong>Expiration</strong>：选择 <code>No expiration</code></li><li><strong>Scopes</strong>：勾选 <code>repo</code> 和 <code>workflow</code></li></ul><blockquote><p><code>repo</code>：访问和推送仓库权限<br><code>workflow</code>：触发 GitHub Actions 工作流权限</p></blockquote><p><img src="https://cdn.osyb.cn/img/2025/07/50f05bef46911cc93fdb482946232dd4.png/blog" alt="token 权限"></p><p>生成后复制该 Token。</p><p>回到你的 Hexo 源码仓库，打开：<br><code>Settings</code> → <code>Secrets and variables</code> → <code>Actions </code><br>点击 <strong>New repository secret</strong>：</p><ul><li><strong>Name</strong>：<code>PERSONAL_TOKEN</code></li><li><strong>Secret</strong>：粘贴你刚复制的 Token</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/ef84d0272cc721b8630464522a92f6d6.png/blog" alt="New secret"></p><hr><h2 id="四、配置-GitHub-Actions-自动部署"><a href="#四、配置-GitHub-Actions-自动部署" class="headerlink" title="四、配置 GitHub Actions 自动部署"></a>四、配置 GitHub Actions 自动部署</h2><p>在 <code>blog</code> 目录下创建部署配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.github/workflows/deploy.yml</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub Actions 配置文件：用于自动部署 Hexo 博客</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 main 分支被 push 时触发部署流程</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="comment"># 使用最新版 Ubuntu 运行环境</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 允许对仓库内容进行写操作（git push）</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Step 1：检出仓库源码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 2：设置 Node.js 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 3：安装依赖</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 4：生成 Hexo 静态文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">Hexo</span> <span class="string">static</span> <span class="string">files</span> </span><br><span class="line">        <span class="attr">run:</span> <span class="string">npx</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 5：部署到 gh-pages 分支</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">personal_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PERSONAL_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">user_name:</span> <span class="string">用户名</span></span><br><span class="line">          <span class="attr">user_email:</span> <span class="string">邮箱</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、提交-Hexo-项目到-GitHub"><a href="#五、提交-Hexo-项目到-GitHub" class="headerlink" title="五、提交 Hexo 项目到 GitHub"></a>五、提交 Hexo 项目到 GitHub</h2><p>执行以下命令将 Hexo 源码推送到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保你在 blog 项目根目录</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Git 仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加全部文件</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建首次提交</span></span><br><span class="line">git commit -m <span class="string">&quot;首次提交 Hexo 博客源码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将默认分支改为 main</span></span><br><span class="line">git branch -M main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库地址（替换为你自己的仓库地址）</span></span><br><span class="line">git remote add origin https://github.com/yubanwo/test.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到 GitHub</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>成功后，刷新 GitHub 仓库页面，你将看到所有 Hexo 源码已经上传。</p><p><img src="https://cdn.osyb.cn/img/2025/07/28884a87ccee42747a5b6da9cfebc804.png/blog" alt="上传成功"></p><hr><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p>等待 GitHub Actions 执行完成之后，查看 <code>gh-pages</code> 分支发现已经生成文件了：</p><p><img src="https://cdn.osyb.cn/img/2025/07/f242a525291fb175ec7289b0da0bd551.png/blog" alt="gh-pages 分支"></p><p>未来每次更新博客，只需执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;更新博客内容&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>GitHub Actions 将自动重新构建并部署，无需你手动操作！</p><p>此外，你也可以通过 FTP、SFTP、WebDAV 等方式部署到服务器，实现自动上传。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的静态博客框架，适合技术类博客搭建。通过 GitHub Actions，我们可以实现代码提交后自动构建并部署</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.osyb.cn/categories/Hexo/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/Hexo/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="GitHub Actions" scheme="https://blog.osyb.cn/tags/GitHub-Actions/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>随身 WiFi 通过 USB 接入 OpenWrt 路由器共享网络却不能访问 IPv6 网站的解决方法（中继版）</title>
    <link href="https://blog.osyb.cn/posts/wz-12/"/>
    <id>https://blog.osyb.cn/posts/wz-12/</id>
    <published>2025-07-18T08:40:16.959Z</published>
    <updated>2025-07-18T10:04:17.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章中，我写了通过 <code>NAT6</code> 模式让 OpenWrt 路由器共享 IPv6 网络的方法（<a href="https://blog.osyb.cn/posts/wz-4/">传送门</a>）。但 NAT6 实际上并不是真正意义上的 IPv6 原生支持，属于 “折中方案”。</p><p>本文将讲解另一种更优雅的方式 —— <strong>IPv6 中继模式</strong>。这种方式能让你的设备获得真实的 IPv6 地址并直接与外部通信，前提是上游网络已经分配了 IPv6 前缀。</p><blockquote><p>场景举例：你用一个随身 WiFi（如 USB 网卡）插在 OpenWrt 路由器上，并成功通过该网卡连接了上游网络（比如校园网或 5G 网络），此时虽然 <code>wan6</code> 接口能获取到 IPv6 地址，但 LAN 口下的设备却无法访问 IPv6 网站。这就是中继模式要解决的问题。</p></blockquote><hr><h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>IPv6 中继模式（relay）并不会像 DHCPv4 一样发放地址，而是通过 RA（路由通告）、DHCPv6、NDP 等协议从上游接口“继承”配置，并传递给下游 LAN 设备。</p><p>适用于以下场景：</p><ul><li>OpenWrt 获取了上游提供的 IPv6 地址，但不会分配前缀（比如某些移动热点）</li><li>OpenWrt 作为透明网关，既不分配 IPv6 前缀，也不进行 NAT，仅作为中继</li></ul><hr><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="第一步：配置-usbwan6-接口（上游）"><a href="#第一步：配置-usbwan6-接口（上游）" class="headerlink" title="第一步：配置 usbwan6 接口（上游）"></a>第一步：配置 <code>usbwan6</code> 接口（上游）</h3><p>进入 OpenWrt Web 管理后台：</p><ul><li><p><code>网络</code> → <code>接口</code> → 选择 <code>usbwan6</code> → <code>编辑</code></p></li><li><p>切换到 <code>DHCP 服务器</code> → <code>IPv6 设置</code> 页面</p><ul><li>启用 <strong>指定的主接口</strong></li><li>RA 服务：<strong>中继模式</strong></li><li>DHCPv6 服务：<strong>中继模式</strong></li><li>NDP 代理：<strong>中继模式</strong></li><li>开启 <strong>学习路由</strong></li></ul></li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/9b590b625f2ef2ae609d4b5fa84183e8.png/blog" alt="配置 usbwan6 接口"></p><hr><h3 id="第二步：配置-lan-接口（下游）"><a href="#第二步：配置-lan-接口（下游）" class="headerlink" title="第二步：配置 lan 接口（下游）"></a>第二步：配置 <code>lan</code> 接口（下游）</h3><ul><li><p><code>网络</code> → <code>接口</code> → 选择 <code>lan</code> → <code>编辑</code></p></li><li><p>切换到 <code>DHCP 服务器</code> → <code>IPv6 设置</code> 页面</p><ul><li>RA 服务：<strong>中继模式</strong></li><li>DHCPv6 服务：<strong>中继模式</strong></li><li>NDP 代理：<strong>中继模式</strong></li><li>开启 <strong>学习路由</strong></li></ul></li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/4a74b157e81f82bb5755c83fb1cc4953.png/blog" alt="配置 lan 接口"></p><hr><h2 id="验证-IPv6-网络是否生效"><a href="#验证-IPv6-网络是否生效" class="headerlink" title="验证 IPv6 网络是否生效"></a>验证 IPv6 网络是否生效</h2><p>完成上述设置后，重启一次路由器。</p><p>然后你可以在终端运行以下命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping6 ipv6.google.com</span><br></pre></td></tr></table></figure><p>或者使用 <a href="https://test-ipv6.com/">https://test-ipv6.com</a> 检查你的设备是否已支持 IPv6。</p><hr><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p><strong>USB网卡无法获取IPv6地址？</strong></p><ul><li>请确认上游网络是否支持 IPv6 分配，部分运营商网络默认只提供 IPv4。</li></ul><p><strong>LAN 口设备获取了 IPv6 地址却无法访问外网？</strong></p><ul><li>请确认防火墙允许 IPv6 转发。</li><li>检查是否启用了 <code>学习路由</code> 功能（relay 模式依赖）。</li></ul><p><strong>使用的是热点网络（如手机共享）？</strong></p><ul><li>手机热点往往不会转发 IPv6，只能使用 NAT6。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>相比 NAT6 模式，IPv6 中继更贴近原生支持，延迟低、稳定性好，适合已经具备上游 IPv6 网络环境的用户。</p><hr><blockquote><p>📝 延伸阅读：<a href="https://blog.osyb.cn/posts/wz-4/">IPv6 NAT6 配置教程</a></p></blockquote><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用，请勿用于任何非法用途。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在上一篇文章中，我写了通过 &lt;code&gt;NAT6&lt;/code&gt; 模式让 OpenWrt 路由器共享 IPv6 网络的方法（&lt;a href=&quot;</summary>
      
    
    
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/categories/OpenWrt/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="OpenWrt " scheme="https://blog.osyb.cn/tags/OpenWrt/"/>
    
    <category term="随身WiFi" scheme="https://blog.osyb.cn/tags/%E9%9A%8F%E8%BA%ABWiFi/"/>
    
    <category term="5G 通信壳" scheme="https://blog.osyb.cn/tags/5G-%E9%80%9A%E4%BF%A1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用指令大全</title>
    <link href="https://blog.osyb.cn/posts/wz-11/"/>
    <id>https://blog.osyb.cn/posts/wz-11/</id>
    <published>2025-07-15T07:45:07.219Z</published>
    <updated>2025-07-15T08:03:00.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git 是一个开源的分布式版本控制系统，常用于代码版本管理和团队协作开发。本文将介绍一些日常开发中最常用的 Git 指令，帮助你快速上手和查阅。</p><h2 id="一、Git-基本配置"><a href="#一、Git-基本配置" class="headerlink" title="一、Git 基本配置"></a>一、Git 基本配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><hr><h2 id="二、项目初始化与克隆"><a href="#二、项目初始化与克隆" class="headerlink" title="二、项目初始化与克隆"></a>二、项目初始化与克隆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个本地仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/项目名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆并指定目录名</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/项目名.git myproject</span><br></pre></td></tr></table></figure><hr><h2 id="三、常用工作流命令"><a href="#三、常用工作流命令" class="headerlink" title="三、常用工作流命令"></a>三、常用工作流命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前仓库状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区（stage）</span></span><br><span class="line">git add 文件名         <span class="comment"># 添加单个文件</span></span><br><span class="line">git add .             <span class="comment"># 添加当前目录下所有更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交代码到本地仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加并提交（快捷命令）</span></span><br><span class="line">git commit -am <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简洁日志查看</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示最近一次提交的改动内容</span></span><br><span class="line">git show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销修改（回退未提交的修改）</span></span><br><span class="line">git checkout -- 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区文件（从暂存区移除）</span></span><br><span class="line">git reset HEAD 文件名</span><br></pre></td></tr></table></figure><hr><h2 id="四、分支操作"><a href="#四、分支操作" class="headerlink" title="四、分支操作"></a>四、分支操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支列表</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支</span></span><br><span class="line">git branch 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换新分支</span></span><br><span class="line">git checkout -b 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支到当前分支</span></span><br><span class="line">git merge 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决冲突后添加并提交</span></span><br><span class="line">git add 冲突文件</span><br><span class="line">git commit -m <span class="string">&quot;解决冲突&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、远程操作"><a href="#五、远程操作" class="headerlink" title="五、远程操作"></a>五、远程操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add origin 仓库地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库（首次）</span></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送当前分支</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程仓库最新代码</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取远程分支信息但不合并</span></span><br><span class="line">git fetch</span><br></pre></td></tr></table></figure><hr><h2 id="六、标签操作"><a href="#六、标签操作" class="headerlink" title="六、标签操作"></a>六、标签操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">git tag v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带注释的标签</span></span><br><span class="line">git tag -a v1.0 -m <span class="string">&quot;版本说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送标签到远程</span></span><br><span class="line">git push origin v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地标签</span></span><br><span class="line">git tag -d v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程标签</span></span><br><span class="line">git push origin :refs/tags/v1.0</span><br></pre></td></tr></table></figure><h2 id="七、撤销与恢复操作"><a href="#七、撤销与恢复操作" class="headerlink" title="七、撤销与恢复操作"></a>七、撤销与恢复操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退到上一个提交（保留改动）</span></span><br><span class="line">git reset --soft HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退到上一个提交（删除改动）</span></span><br><span class="line">git reset --hard HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 丢弃工作区和暂存区的所有改动</span></span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某次提交的修改内容</span></span><br><span class="line">git diff 提交ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销 commit（如需修改提交信息）</span></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><hr><h2 id="八、忽略文件配置（-gitignore）"><a href="#八、忽略文件配置（-gitignore）" class="headerlink" title="八、忽略文件配置（.gitignore）"></a>八、忽略文件配置（.gitignore）</h2><p>创建 <code>.gitignore</code> 文件以指定 Git 忽略哪些文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略 node_modules 目录</span></span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略所有 .log 文件</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略本地配置文件</span></span><br><span class="line">.env.local</span><br></pre></td></tr></table></figure><hr><h2 id="九、常见问题解决"><a href="#九、常见问题解决" class="headerlink" title="九、常见问题解决"></a>九、常见问题解决</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fatal: refusing to merge unrelated histories</span></span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改上一次提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;新的提交信息&quot;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Git 是一个开源的分布式版本控制系统，常用于代码版本管理和团队协作开发。本文将介绍一些日常开发中最常用的 Git 指令，帮助你快速上手和查</summary>
      
    
    
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="记录" scheme="https://blog.osyb.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>712会员节｜免费领取14天QQ超级会员</title>
    <link href="https://blog.osyb.cn/posts/wz-10/"/>
    <id>https://blog.osyb.cn/posts/wz-10/</id>
    <published>2025-07-14T17:29:54.804Z</published>
    <updated>2025-07-20T08:23:34.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🎉-活动简介"><a href="#🎉-活动简介" class="headerlink" title="🎉 活动简介"></a>🎉 活动简介</h2><p>腾讯推出的 <strong>「712会员节·每面皆闪耀」</strong> 活动现已开启，参与即可 <strong>免费领取 14 天 QQ 超级会员</strong>，还有其他多项任务奖励等你来解锁！</p><p>本次活动不仅福利满满，而且操作简单，完成任务即可获得奖励，人人可领！</p><hr><h2 id="🗓-活动时间"><a href="#🗓-活动时间" class="headerlink" title="🗓 活动时间"></a>🗓 活动时间</h2><p><strong>2025年7月11日 11:00:00 ～ 2025年8月12日 23:59:59</strong></p><p>请在活动截止前完成任务并领取奖励，逾期将无法领取。</p><hr><h2 id="🎁-活动奖励"><a href="#🎁-活动奖励" class="headerlink" title="🎁 活动奖励"></a>🎁 活动奖励</h2><ul><li>✅ 必得奖励：<strong>14天 QQ 超级会员</strong></li><li>🎯 其他奖励：完成任务过程中的额外惊喜（具体以页面为准）</li></ul><hr><h2 id="🚪-活动入口"><a href="#🚪-活动入口" class="headerlink" title="🚪 活动入口"></a>🚪 活动入口</h2><ul><li><p>🔗 活动链接：<a href="https://club.vip.qq.com/transfer?kuikly=vas_vip_fest_2025&from=ark_invite&invite_code=5aef3b28-0d24-430a-8c58-2929e51ea81b">点击前往活动页面</a></p></li><li><p>📱 扫码参与：</p><p><img src="https://cdn.osyb.cn/img/2025/07/f4ac5743e3e595cf202a606404a790f1.png/blog" alt="扫码进入活动"></p></li></ul><hr><h2 id="📝-参与流程"><a href="#📝-参与流程" class="headerlink" title="📝 参与流程"></a>📝 参与流程</h2><p>只需按照下列步骤操作，完成 8 个任务点亮进度条即可领取超级会员。</p><ol><li>使用手机QQ打开链接或扫描二维码</li><li>按提示完成任务</li><li>点亮任务进度至 <strong>8&#x2F;8</strong></li><li>点击「立即领取」按钮</li><li>完成全部任务，即可成功领取 <strong>14天超级会员</strong></li></ol><p>任务示意图如下：</p><p><img src="https://cdn.osyb.cn/img/2025/07/df32f207e65189100a7873ecaeb3cce0.jpeg/blog" alt="任务进度示意图"></p><p>成功领取奖励示意图：</p><p><img src="https://cdn.osyb.cn/img/2025/07/40077013d73f3c0654cbc13b2aa59352.jpg/blog" alt="领取成功示意图"></p><hr><h2 id="💡-温馨提示"><a href="#💡-温馨提示" class="headerlink" title="💡 温馨提示"></a>💡 温馨提示</h2><ul><li>每个 QQ 号限领取一次，请使用常用账号参与。</li><li>建议使用最新版 QQ 或浏览器打开活动页面，避免加载异常。</li><li>若出现无法领取的问题，请刷新页面或稍后重试。</li></ul><hr><p>📢 <strong>别错过这次白嫖福利，抓紧时间参加吧！分享给朋友，一起拿会员～</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🎉-活动简介&quot;&gt;&lt;a href=&quot;#🎉-活动简介&quot; class=&quot;headerlink&quot; title=&quot;🎉 活动简介&quot;&gt;&lt;/a&gt;🎉 活动简介&lt;/h2&gt;&lt;p&gt;腾讯推出的 &lt;strong&gt;「712会员节·每面皆闪耀」&lt;/strong&gt; 活动现已开启，参与即可 </summary>
      
    
    
    
    <category term="活动资讯" scheme="https://blog.osyb.cn/categories/%E6%B4%BB%E5%8A%A8%E8%B5%84%E8%AE%AF/"/>
    
    
    <category term="活动资讯" scheme="https://blog.osyb.cn/tags/%E6%B4%BB%E5%8A%A8%E8%B5%84%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>Windows 浏览器提示未连接到互联网？可能是代理设置没关掉</title>
    <link href="https://blog.osyb.cn/posts/wz-9/"/>
    <id>https://blog.osyb.cn/posts/wz-9/</id>
    <published>2025-07-14T07:08:22.588Z</published>
    <updated>2025-07-14T07:29:09.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用网络加速器或机场服务（如 Clash、V2Ray、Trojan 等）之后，很多用户在<strong>重启电脑后首次打开浏览器时</strong>，会遇到以下提示：</p><blockquote><p><strong>“未连接到互联网，代理服务器出现问题，或者地址有误。”</strong></p></blockquote><p>这个问题多数情况下是因为<strong>系统代理设置没有恢复为默认状态</strong>，导致浏览器或其他程序仍然尝试通过已经关闭的代理服务器连接网络，最终连接失败。</p><p><img src="https://cdn.osyb.cn/img/2025/07/bec26f1992c236a32a7d06914dacb3a3.png/blog"></p><hr><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><h3 id="浏览器错误提示（可能是以下几种）："><a href="#浏览器错误提示（可能是以下几种）：" class="headerlink" title="浏览器错误提示（可能是以下几种）："></a>浏览器错误提示（可能是以下几种）：</h3><ul><li>无法访问此网站</li><li>请检查您的互联网连接</li><li>代理服务器出现问题，或者地址有误</li><li>ERR_PROXY_CONNECTION_FAILED</li></ul><p>这些报错大多数都与系统中的<strong>HTTP&#x2F;HTTPS代理配置</strong>残留有关。</p><hr><h2 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h2><ol><li><strong>加速器未正常关闭代理设置</strong><br>一些加速器&#x2F;机场客户端关闭后不会自动清除或还原系统代理设置。</li><li><strong>开机启动项设置残留</strong><br>加速器设置了系统代理，但并未随系统启动，导致代理地址无效。</li><li><strong>断电或系统崩溃后配置未恢复</strong><br>突然关机或程序异常退出，系统代理配置未能被及时重置。</li></ol><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法一：手动关闭系统代理"><a href="#方法一：手动关闭系统代理" class="headerlink" title="方法一：手动关闭系统代理"></a>方法一：手动关闭系统代理</h3><ol><li><p><strong>打开系统设置</strong><br>点击开始菜单 → 设置（Settings）</p></li><li><p><strong>进入网络设置</strong><br>依次点击：<br><code>网络和 Internet</code> → <code>代理</code></p></li><li><p><strong>关闭代理服务器</strong><br>在<strong>手动代理设置</strong>中，将“<strong>使用代理服务器</strong>”的开关关闭。</p><p><img src="https://cdn.osyb.cn/img/2025/07/6bb313c97705e5d4d07cf22610339095.png/blog"></p></li><li><p>关闭设置页面，重新打开浏览器测试是否恢复正常。</p></li></ol><hr><h3 id="方法二：使用命令行重置代理配置"><a href="#方法二：使用命令行重置代理配置" class="headerlink" title="方法二：使用命令行重置代理配置"></a>方法二：使用命令行重置代理配置</h3><p>如果你希望更快速地通过命令行解决，可以按下 <code>Win + R</code> 打开运行框，输入 <code>cmd</code>，以管理员身份运行命令提示符，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp reset proxy</span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/07/3dd6dfeb8f218a21f22c22c07a554188.png/blog"></p><p>此命令会重置 <code>WinHTTP</code> 代理配置（不是浏览器代理，但部分系统级别应用依赖）。</p><hr><h3 id="方法三：使用-PowerShell-清除代理设置"><a href="#方法三：使用-PowerShell-清除代理设置" class="headerlink" title="方法三：使用 PowerShell 清除代理设置"></a>方法三：使用 PowerShell 清除代理设置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings&#x27;</span> <span class="literal">-Name</span> ProxyEnable <span class="literal">-Value</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/07/2f089a6ead497b27a19067acea8f26ce.png/blog"></p><hr><h2 id="如何避免此问题再次发生？"><a href="#如何避免此问题再次发生？" class="headerlink" title="如何避免此问题再次发生？"></a>如何避免此问题再次发生？</h2><ol><li><strong>使用自带代理还原功能的加速器</strong><br>优先选择能自动恢复代理设置的客户端，例如 Clash for Windows、V2RayN 等的“退出时关闭代理”选项。</li><li><strong>不要直接结束进程</strong><br>避免在任务管理器中直接结束加速器进程，否则可能留下代理设置。</li><li><strong>定期检查代理设置</strong><br>特别是在网络连接异常时，第一时间检查 <code>设置 → 网络和 Internet → 代理</code>。</li><li><strong>设置启动脚本自动还原</strong>（进阶用户可选）<br>使用批处理脚本或 PowerShell 每次开机自动重置系统代理设置。</li></ol><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>使用加速器的同时，注意代理配置的管理可以避免很多不必要的网络连接问题。如果你经常遇到这种问题，不妨将这篇文章收藏起来，作为应急解决方案参考。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在使用网络加速器或机场服务（如 Clash、V2Ray、Trojan 等）之后，很多用户在&lt;strong&gt;重启电脑后首次打开浏览器时&lt;/st</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Windows" scheme="https://blog.osyb.cn/categories/Windows/"/>
    
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Windows" scheme="https://blog.osyb.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Debian 中使用 Bind Mount 实现目录挂载</title>
    <link href="https://blog.osyb.cn/posts/wz-8/"/>
    <id>https://blog.osyb.cn/posts/wz-8/</id>
    <published>2025-07-14T03:12:26.185Z</published>
    <updated>2025-07-14T03:36:55.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常运维或开发环境中，我们可能希望将一个目录的内容映射到系统中的另一个位置。例如，将某个软件的数据目录挂载到一个新的路径，或者在容器环境中实现目录隔离。这时候就可以使用 Linux 的 bind mount 功能来实现。本文将介绍如何在 Debian 系统中实现这一操作。</p><hr><h2 id="一、什么是-Bind-Mount？"><a href="#一、什么是-Bind-Mount？" class="headerlink" title="一、什么是 Bind Mount？"></a>一、什么是 Bind Mount？</h2><p>Bind mount（绑定挂载）是 Linux 提供的一种特殊挂载方式，它可以让一个已有的目录在另一个路径下“出现”。不同于挂载硬盘设备，bind mount 是将已有目录绑定到另一个目录，不涉及文件系统的改变。</p><hr><h2 id="二、使用-bind-mount-的基本语法"><a href="#二、使用-bind-mount-的基本语法" class="headerlink" title="二、使用 bind mount 的基本语法"></a>二、使用 bind mount 的基本语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount --<span class="built_in">bind</span> &lt;原始目录&gt; &lt;目标目录&gt;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设你想将 <code>/var/www/project/data</code> 绑定挂载到 <code>/home/user/data_link</code>，可以执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /home/user/data_link</span><br><span class="line"><span class="built_in">sudo</span> mount --<span class="built_in">bind</span> /var/www/project/data /home/user/data_link</span><br></pre></td></tr></table></figure><p>执行后，你就可以通过 <code>/home/user/data_link</code> 访问 <code>/var/www/project/data</code> 的内容了。</p><hr><h2 id="三、查看挂载结果"><a href="#三、查看挂载结果" class="headerlink" title="三、查看挂载结果"></a>三、查看挂载结果</h2><p>你可以使用 <code>mount</code> 命令或 <code>findmnt</code> 查看是否挂载成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount | grep data_link</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findmnt /home/user/data_link</span><br></pre></td></tr></table></figure><hr><h2 id="四、如何实现开机自动挂载"><a href="#四、如何实现开机自动挂载" class="headerlink" title="四、如何实现开机自动挂载"></a>四、如何实现开机自动挂载</h2><p>临时挂载在系统重启后会失效。如果你希望系统启动后自动进行绑定挂载，需要将信息写入 <code>/etc/fstab</code> 文件。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>编辑 <code>/etc/fstab</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/fstab</span><br></pre></td></tr></table></figure><ol start="2"><li>添加如下内容：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/project/data  /home/user/data_link  none  bind  0  0</span><br></pre></td></tr></table></figure><ol start="3"><li>保存并运行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -a</span><br></pre></td></tr></table></figure><p>如果没有报错，说明配置正确。</p><hr><h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><ul><li>目标目录必须存在，否则挂载命令会失败。</li><li>如果源目录或目标目录涉及权限或 SELinux，需要确保访问策略正确。</li><li>bind mount 只是路径的“映射”，删除目标目录不会删除原目录中的数据。</li></ul><hr><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p>bind mount 是一个简单高效的方式，用于将一个目录挂载到另一个目录，在开发部署、数据重定向等场景中非常实用。通过 <code>mount --bind</code> 命令和 <code>/etc/fstab</code> 配置，你可以灵活地管理你的目录结构。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在日常运维或开发环境中，我们可能希望将一个目录的内容映射到系统中的另一个位置。例如，将某个软件的数据目录挂载到一个新的路径，或者在容器环境中</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Linux" scheme="https://blog.osyb.cn/categories/Linux/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Debian" scheme="https://blog.osyb.cn/tags/Debian/"/>
    
    <category term="Linux" scheme="https://blog.osyb.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Debian 创建一个纯 SFTP 用户环境</title>
    <link href="https://blog.osyb.cn/posts/wz-7/"/>
    <id>https://blog.osyb.cn/posts/wz-7/</id>
    <published>2025-07-11T19:06:49.942Z</published>
    <updated>2025-07-11T19:43:14.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在某些场景下，我们希望给某些用户提供 <strong>SFTP 文件上传&#x2F;下载权限</strong>，而不允许他们使用 SSH 登录系统。本文将介绍如何在 <strong>Debian 系统</strong>上创建一个<strong>纯 SFTP 用户环境</strong>，只允许使用 SFTP，禁止 SSH shell 访问。</p><hr><h2 id="一、前提条件"><a href="#一、前提条件" class="headerlink" title="一、前提条件"></a>一、前提条件</h2><ul><li>已安装并启用了 OpenSSH 服务。</li><li>拥有一台 Debian 服务器的 root 权限或 sudo 权限。</li></ul><hr><h2 id="二、创建-SFTP-用户组和用户"><a href="#二、创建-SFTP-用户组和用户" class="headerlink" title="二、创建 SFTP 用户组和用户"></a>二、创建 SFTP 用户组和用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 SFTP 用户组</span></span><br><span class="line"><span class="built_in">sudo</span> groupadd sftpusers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个用户，仅允许使用 SFTP，禁用 shell</span></span><br><span class="line"><span class="built_in">sudo</span> useradd -m -d /home/sftpuser -s /usr/sbin/nologin -g sftpusers sftpuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码（用于 SFTP 登录）</span></span><br><span class="line"><span class="built_in">sudo</span> passwd sftpuser</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个用户，仅允许使用 SFTP，禁用 shell</span></span><br><span class="line"><span class="built_in">sudo</span> adduser --shell /usr/sbin/nologin --no-create-home sftpuser</span><br></pre></td></tr></table></figure><p>如果你只是为了创建账号，不需要填写这些信息，直接按回车（Enter）跳过即可，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Full Name []:        ← 直接按回车</span><br><span class="line">Room Number []:      ← 再按回车</span><br><span class="line">Work Phone []:       ← 再按回车</span><br><span class="line">...</span><br><span class="line">Is the information correct? [Y/n]</span><br></pre></td></tr></table></figure><p>输入 Y 或直接回车就完成了。</p><hr><h2 id="三、配置用户目录权限"><a href="#三、配置用户目录权限" class="headerlink" title="三、配置用户目录权限"></a>三、配置用户目录权限</h2><p>OpenSSH 要求 SFTP 的根目录不能被用户写入，因此需要设置一个只读根目录，并在其下创建一个可写子目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置根目录权限（必须是 root 拥有）</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> root:root /home/sftpuser</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 755 /home/sftpuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建上传目录并赋予用户权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /home/sftpuser/uploads</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> sftpuser:sftpusers /home/sftpuser/uploads</span><br></pre></td></tr></table></figure><hr><h2 id="四、配置-OpenSSH-的-SFTP-限制"><a href="#四、配置-OpenSSH-的-SFTP-限制" class="headerlink" title="四、配置 OpenSSH 的 SFTP 限制"></a>四、配置 OpenSSH 的 SFTP 限制</h2><p>编辑 SSH 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>在文件末尾添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Match Group sftpusers</span><br><span class="line">    ChrootDirectory %h</span><br><span class="line">    ForceCommand internal-sftp</span><br><span class="line">    X11Forwarding no</span><br><span class="line">    AllowTcpForwarding no</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>ChrootDirectory %h</code>：将用户限制在自己的主目录。</li><li><code>ForceCommand internal-sftp</code>：强制使用 SFTP。</li><li>禁用端口转发和 X11 转发以增强安全性。</li></ul><hr><h2 id="五、重启-SSH-服务"><a href="#五、重启-SSH-服务" class="headerlink" title="五、重启 SSH 服务"></a>五、重启 SSH 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart ssh</span><br></pre></td></tr></table></figure><hr><h2 id="六、安全建议"><a href="#六、安全建议" class="headerlink" title="六、安全建议"></a>六、安全建议</h2><ul><li>每个用户独立目录 <code>/home/用户名/uploads</code>。</li><li>建议结合 fail2ban 或防火墙防止暴力破解。</li><li>可进一步使用证书认证替代密码。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过以上步骤，我们成功在 Debian 系统中创建了一个安全、隔离、无法登录 Shell 的 SFTP 用户环境，适合用于文件托管、自动上传等场景。相比直接开放 SSH，这种方式不仅更安全，还能精细控制用户权限。<br>在实际使用中，建议定期审查 SFTP 用户权限、访问日志，并结合防火墙和审计工具提升系统整体安全性。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在某些场景下，我们希望给某些用户提供 &lt;strong&gt;SFTP 文件上传&amp;#x2F;下载权限&lt;/strong&gt;，而不允许他们使用 SSH 登</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Linux" scheme="https://blog.osyb.cn/categories/Linux/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Debian" scheme="https://blog.osyb.cn/tags/Debian/"/>
    
    <category term="Linux" scheme="https://blog.osyb.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>让 OpenWrt 支持USB网络共享</title>
    <link href="https://blog.osyb.cn/posts/wz-6/"/>
    <id>https://blog.osyb.cn/posts/wz-6/</id>
    <published>2025-07-10T14:51:59.569Z</published>
    <updated>2025-07-12T03:11:26.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方的 OpenWrt 固件是不带 USB 网络共享功能的，还需要手动安装相关模块。</p><hr><h2 id="一、RNDIS模式（推荐）"><a href="#一、RNDIS模式（推荐）" class="headerlink" title="一、RNDIS模式（推荐）"></a>一、RNDIS模式（推荐）</h2><p>RNDIS（Remote Network Driver Interface Specification）是微软开发的网络设备通讯协议，兼容性极高，广泛支持 Windows、Linux、OpenWrt 等系统。</p><p><strong>优点：</strong></p><ul><li>支持广泛，尤其是 Windows 系统；</li><li>OpenWrt 路由器只需两个模块即可启用；</li><li>稳定性较好。</li></ul><p><strong>缺点：</strong></p><ul><li>在部分 Linux 系统中表现一般，吞吐率略低。</li></ul><h3 id="1-面板安装"><a href="#1-面板安装" class="headerlink" title="1. 面板安装"></a>1. 面板安装</h3><p>在OpenWrt系统的 Web 面板中，进入 <strong>系统 &gt; 软件包</strong>，搜索并安装以下模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kmod-usb-net</span><br><span class="line">kmod-usb-net-rndis</span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/07/d4e115184f78dba4573fbf9494bb309a.png/blog" alt="OpenWrt 面板安装模块"></p><h3 id="2-SSH安装"><a href="#2-SSH安装" class="headerlink" title="2. SSH安装"></a>2. SSH安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install kmod-usb-net kmod-usb-net-rndis</span><br></pre></td></tr></table></figure><hr><h2 id="二、CDC-ECM模式（适用于Linux）"><a href="#二、CDC-ECM模式（适用于Linux）" class="headerlink" title="二、CDC-ECM模式（适用于Linux）"></a>二、CDC-ECM模式（适用于Linux）</h2><p>CDC-ECM（Ethernet Control Model）是 USB 通信类中的一种标准协议，主要为以太网数据通信而设计。</p><p><strong>优点：</strong></p><ul><li>Linux 和 OpenWrt 默认原生支持，无需额外驱动；</li><li>协议规范、实现简洁；</li><li>稳定性好，适合嵌入式设备。</li></ul><p><strong>缺点：</strong></p><ul><li>不支持 Windows 系统（需要手动安装驱动或修改 INF 文件）；</li><li>吞吐率一般。</li></ul><h3 id="1-面板安装-1"><a href="#1-面板安装-1" class="headerlink" title="1. 面板安装"></a>1. 面板安装</h3><p>安装以下模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kmod-usb-net  </span><br><span class="line">kmod-usb-net-cdc-eem</span><br></pre></td></tr></table></figure><h3 id="2-SSH安装-1"><a href="#2-SSH安装-1" class="headerlink" title="2. SSH安装"></a>2. SSH安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install kmod-usb-net kmod-usb-net-cdc-eem</span><br></pre></td></tr></table></figure><hr><h2 id="三、CDC-NCM模式（高性能模式）"><a href="#三、CDC-NCM模式（高性能模式）" class="headerlink" title="三、CDC-NCM模式（高性能模式）"></a>三、CDC-NCM模式（高性能模式）</h2><p>CDC-NCM（Network Control Model）是 CDC-ECM 的增强版本，提供更高的数据吞吐能力，适合需要更高网络性能的应用场景，如 4G&#x2F;5G 上网卡等。</p><p><strong>优点：</strong></p><ul><li>吞吐率高、数据效率优；</li><li>在 Linux 和 OpenWrt 下支持良好；</li><li>适合高速网络连接设备。</li></ul><p><strong>缺点：</strong></p><ul><li>Windows 支持不佳；</li><li>相比 ECM 配置稍复杂；</li><li>部分设备兼容性较差。</li></ul><h3 id="1-面板安装-2"><a href="#1-面板安装-2" class="headerlink" title="1. 面板安装"></a>1. 面板安装</h3><p>安装以下模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kmod-usb-net  </span><br><span class="line">kmod-usb-net-cdc-ncm</span><br></pre></td></tr></table></figure><h3 id="2-SSH安装-2"><a href="#2-SSH安装-2" class="headerlink" title="2. SSH安装"></a>2. SSH安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install kmod-usb-net kmod-usb-net-cdc-ncm</span><br></pre></td></tr></table></figure><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>确保 OpenWrt 已经安装了以下核心模块：</p><ul><li><code>kmod-usb-core</code></li><li><code>kmod-usb2</code> 或 <code>kmod-usb3</code>（根据你设备的 USB 接口类型选择）</li></ul><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;官方的 OpenWrt 固件是不带 USB 网络共享功能的，还需要手动安装相关模块。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、RNDIS模式（</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/categories/OpenWrt/"/>
    
    
    <category term="5G 通信壳" scheme="https://blog.osyb.cn/tags/5G-%E9%80%9A%E4%BF%A1%E5%A3%B3/"/>
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>小米 R3G 路由器刷 Breed</title>
    <link href="https://blog.osyb.cn/posts/wz-5/"/>
    <id>https://blog.osyb.cn/posts/wz-5/</id>
    <published>2025-06-28T10:33:42.070Z</published>
    <updated>2025-07-10T16:53:26.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天入手了一个华为的 5G 通信壳，为了更方便地使用，特意购买了一台带有 USB 3.0 接口的小米 R3G 路由器。由于其原厂系统不支持 USB 网络共享功能，因此考虑刷入 OpenWrt 系统，首先需刷入 Breed 启动引导。</p><hr><h2 id="一、准备工作与开启-SSH"><a href="#一、准备工作与开启-SSH" class="headerlink" title="一、准备工作与开启 SSH"></a>一、准备工作与开启 SSH</h2><h3 id="1-刷入稳定版官方固件"><a href="#1-刷入稳定版官方固件" class="headerlink" title="1. 刷入稳定版官方固件"></a>1. 刷入稳定版官方固件</h3><ul><li>固件文件：<a href="https://bigota.miwifi.com/xiaoqiang/rom/r3g/miwifi_r3g_firmware_12f97_2.25.124.bin">miwifi_r3g_firmware_9be74_2.28.44.bin</a></li><li>固件版本：2.28.44</li></ul><h3 id="2-刷入开发版官方固件"><a href="#2-刷入开发版官方固件" class="headerlink" title="2. 刷入开发版官方固件"></a>2. 刷入开发版官方固件</h3><ul><li>固件文件：<a href="https://bigota.miwifi.com/xiaoqiang/rom/r3g/miwifi_r3g_firmware_12f97_2.25.124.bin">miwifi_r3g_firmware_12f97_2.25.124.bin</a></li><li>固件版本：2.25.124</li></ul><h3 id="3-绑定设备与申请-SSH-权限"><a href="#3-绑定设备与申请-SSH-权限" class="headerlink" title="3. 绑定设备与申请 SSH 权限"></a>3. 绑定设备与申请 SSH 权限</h3><p>通过下载并安装“小米路由器 APP”，登录你的小米账号并绑定设备。<br>绑定完成后，前往 <a href="https://d.miwifi.com/rom/ssh">小米开放平台</a> 申请 SSH 权限，并下载 SSH 工具包 <code>miwifi_ssh.bin</code>。</p><h3 id="4-写入-SSH-工具包"><a href="#4-写入-SSH-工具包" class="headerlink" title="4. 写入 SSH 工具包"></a>4. 写入 SSH 工具包</h3><ol><li>确保 U 盘格式为 FAT 或 FAT32。</li><li>将 <code>miwifi_ssh.bin</code> 文件放置于 U 盘根目录。</li><li>断开路由器电源，插入 U 盘，按住 Reset 按钮并接通电源。</li><li>指示灯变为黄色闪烁后松开按钮，等待自动重启。</li></ol><p>此时，SSH 权限应已成功写入。</p><hr><h2 id="二、刷入-Breed-启动引导"><a href="#二、刷入-Breed-启动引导" class="headerlink" title="二、刷入 Breed 启动引导"></a>二、刷入 Breed 启动引导</h2><h3 id="1-准备-Breed-文件"><a href="#1-准备-Breed-文件" class="headerlink" title="1. 准备 Breed 文件"></a>1. 准备 Breed 文件</h3><ul><li>官方网站：<a href="https://breed.hackpascal.net/">https://breed.hackpascal.net/</a></li><li>固件下载：<a href="https://breed.hackpascal.net/breed-mt7621-xiaomi-r3g.bin">breed-mt7621-xiaomi-r3g.bin</a></li></ul><h4 id="文件放置方式："><a href="#文件放置方式：" class="headerlink" title="文件放置方式："></a>文件放置方式：</h4><ul><li>拔出 U 盘，在其根目录新建名为 <code>Breed</code> 的文件夹。</li><li>将下载好的 <code>breed-mt7621-xiaomi-r3g.bin</code> 文件放入其中。</li><li>再次将 U 盘插入路由器。</li></ul><h3 id="2-SSH-登录路由器"><a href="#2-SSH-登录路由器" class="headerlink" title="2. SSH 登录路由器"></a>2. SSH 登录路由器</h3><p>使用 SSH 工具（如 PuTTY 或终端）连接至路由器：</p><ul><li>主机地址：<code>192.168.31.1</code></li><li>用户名：<code>root</code></li><li>密码：使用小米平台提供的 SSH 密码</li></ul><h3 id="3-刷入-Breed"><a href="#3-刷入-Breed" class="headerlink" title="3. 刷入 Breed"></a>3. 刷入 Breed</h3><p>确认 U 盘路径为 <code>/extdisks/sda1</code>，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write -r /extdisks/sda1/Breed/breed-mt7621-xiaomi-r3g.bin Bootloader</span><br></pre></td></tr></table></figure><p>等待系统自动重启。</p><h3 id="4-验证是否刷入成功"><a href="#4-验证是否刷入成功" class="headerlink" title="4. 验证是否刷入成功"></a>4. 验证是否刷入成功</h3><p>重启后访问 <a href="http://192.168.1.1/">http://192.168.1.1</a>，若进入 Breed Web 界面，则刷写成功。若无法进入，请尝试：</p><ul><li>断电</li><li>按住 Reset 键</li><li>接通电源等待指示灯状态变化，进入 Breed 恢复模式</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/38df450d8e8f015157c065c311efd62b.png/blog" alt="Breed Web 恢复控制台"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>注意：刷机有风险，请谨慎操作并提前备份原始固件。</p><p>文章参考：<a href="%5Bhttps://%5D(https://clockworkmonkeystudio.com/2024/03/16/XiaoMiR3G/)">https://clockworkmonkeystudio.com/2024/03/16/XiaoMiR3G/</a></p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天入手了一个华为的 5G 通信壳，为了更方便地使用，特意购买了一台带有 USB 3.0 接口的小米 R3G 路由器。由于其原厂系统不支持</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/categories/OpenWrt/"/>
    
    
    <category term="OpenWrt " scheme="https://blog.osyb.cn/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>随身 WiFi 通过 USB 接入 OpenWrt 路由器共享网络却不能访问 IPv6 网站的解决方法（NAT6 版）</title>
    <link href="https://blog.osyb.cn/posts/wz-4/"/>
    <id>https://blog.osyb.cn/posts/wz-4/</id>
    <published>2025-06-26T10:56:53.081Z</published>
    <updated>2025-07-18T10:04:05.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候，我们通过随身 WiFi（如 USB 网卡）将路由器连接至外部网络后，虽然 <code>wan6</code> 接口成功获取了 IPv6 地址，但下游设备却无法访问 IPv6 网站。</p><p>如果你的网络环境不支持 IPv6 前缀委派（PD），这时可以考虑使用一种折中的方案 —— <strong>NAT6</strong>，即将 IPv6 网络做 SNAT 转换，以绕过 PD 限制，从而实现 IPv6 访问。</p><p>本文将介绍如何基于 OpenWrt 设置 NAT6，以实现 IPv6 网络访问。</p><hr><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="第一步：关闭-IPv6-源路由"><a href="#第一步：关闭-IPv6-源路由" class="headerlink" title="第一步：关闭 IPv6 源路由"></a>第一步：关闭 IPv6 源路由</h3><p>进入 OpenWrt Web 管理后台：</p><ul><li>点击 <code>网络</code> → <code>接口</code> → <code>wan6</code> → <code>编辑</code> → <code>高级设置</code></li><li>关闭 <strong>IPv6 源路由</strong>（防止意外路由泄露）</li></ul><p><img src="https://cdn.osyb.cn/img/2025/06/25ec3ad221c5d032c351766a1e30296f.png/blog" alt="关闭 IPv6 源路由"></p><hr><h3 id="第二步：修改-LAN-接口默认路由器通告"><a href="#第二步：修改-LAN-接口默认路由器通告" class="headerlink" title="第二步：修改 LAN 接口默认路由器通告"></a>第二步：修改 LAN 接口默认路由器通告</h3><ul><li>点击 <code>网络</code> → <code>接口</code> → <code>lan</code> → <code>编辑</code> → <code>DHCP 服务器</code> → <code>IPv6 RA 设置</code></li><li>修改 <strong>默认路由器</strong> 为 <strong>强制的</strong>（确保设备使用路由器的 IPv6 出口）</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/95f5428103d6180e3e79047b473f47a8.png/blog" alt="修改 LAN 接口默认路由器通告"></p><hr><h3 id="第三步：启用-IPv6-伪装（NAT6-核心）"><a href="#第三步：启用-IPv6-伪装（NAT6-核心）" class="headerlink" title="第三步：启用 IPv6 伪装（NAT6 核心）"></a>第三步：启用 IPv6 伪装（NAT6 核心）</h3><ul><li>点击 <code>网络</code> → <code>防火墙</code> → <code>常规设置</code> → <code>区域</code> → <code>wan</code> → <code>编辑</code> → <code>高级设置</code></li><li>启用 <strong>IPv6 伪装</strong>（即 SNAT 类似功能）</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/95e66a97be7f6d2b4217bf142f668f69.png/blog" alt="启用 IPv6 伪装"></p><p>此功能从 <strong>OpenWrt 22.03</strong> 起默认支持。</p><hr><h2 id="验证是否生效"><a href="#验证是否生效" class="headerlink" title="验证是否生效"></a>验证是否生效</h2><p>执行以下命令测试 IPv6 连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping6 ipv6.google.com</span><br></pre></td></tr></table></figure><p>或访问：<a href="https://test-ipv6.com/">https://test-ipv6.com</a></p><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>NAT6 不是原生 IPv6，某些服务（如 P2P 或远程入站连接）可能不可用。</li><li>建议优先使用中继模式或原生 PD，如环境受限再使用 NAT6。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你所处的网络环境无法下发 IPv6 前缀（如部分校园网或 5G 通信壳），NAT6 是目前一个相对简单有效的 IPv6 解决方案。</p><hr><blockquote><p>📝 延伸阅读：<a href="https://blog.osyb.cn/posts/wz-12/">IPv6 中继配置教程</a></p></blockquote><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用，请勿用于任何非法用途。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有时候，我们通过随身 WiFi（如 USB 网卡）将路由器连接至外部网络后，虽然 &lt;code&gt;wan6&lt;/code&gt; 接口成功获取了 IPv</summary>
      
    
    
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/categories/OpenWrt/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="OpenWrt " scheme="https://blog.osyb.cn/tags/OpenWrt/"/>
    
    <category term="随身WiFi" scheme="https://blog.osyb.cn/tags/%E9%9A%8F%E8%BA%ABWiFi/"/>
    
    <category term="5G 通信壳" scheme="https://blog.osyb.cn/tags/5G-%E9%80%9A%E4%BF%A1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>postmarketOS 常用命令</title>
    <link href="https://blog.osyb.cn/posts/wz-3/"/>
    <id>https://blog.osyb.cn/posts/wz-3/</id>
    <published>2025-06-22T14:06:27.246Z</published>
    <updated>2025-06-23T05:36:36.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、图形用户界面"><a href="#一、图形用户界面" class="headerlink" title="一、图形用户界面"></a>一、图形用户界面</h2><h3 id="关闭图形用户界面"><a href="#关闭图形用户界面" class="headerlink" title="关闭图形用户界面"></a>关闭图形用户界面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rc-update del tinydm</span><br></pre></td></tr></table></figure><h3 id="开启图形用户界面"><a href="#开启图形用户界面" class="headerlink" title="开启图形用户界面"></a>开启图形用户界面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rc-update add tinydm default</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、图形用户界面&quot;&gt;&lt;a href=&quot;#一、图形用户界面&quot; class=&quot;headerlink&quot; title=&quot;一、图形用户界面&quot;&gt;&lt;/a&gt;一、图形用户界面&lt;/h2&gt;&lt;h3 id=&quot;关闭图形用户界面&quot;&gt;&lt;a href=&quot;#关闭图形用户界面&quot; class=&quot;head</summary>
      
    
    
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="postmarketOS" scheme="https://blog.osyb.cn/tags/postmarketOS/"/>
    
  </entry>
  
  <entry>
    <title>Qexo 使用 DogeCloud 云存储作为图床</title>
    <link href="https://blog.osyb.cn/posts/wz-2/"/>
    <id>https://blog.osyb.cn/posts/wz-2/</id>
    <published>2025-06-17T14:35:09.414Z</published>
    <updated>2025-06-23T05:38:40.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建储存空间"><a href="#一、创建储存空间" class="headerlink" title="一、创建储存空间"></a>一、创建储存空间</h2><p>在 <a href="https://console.dogecloud.com/oss/list">DogeCloud</a> 创建一个储存空间，选择标准型（基础型不支持使用 SDK 和 API 上传&#x2F;管理文件）<br><img src="https://cdn.osyb.cn/img/2025/06/c65dc3cf49b57c95059f4f013a674d7f.png/blog"></p><h2 id="二、获取储存空间的-SDK-参数"><a href="#二、获取储存空间的-SDK-参数" class="headerlink" title="二、获取储存空间的 SDK 参数"></a>二、获取储存空间的 SDK 参数</h2><p>打开刚刚创建的储存空间，点击 <code>SDK 参数</code> ，这里我们需要 <code>s3Bucket</code> 和 <code>s3Endpoint</code></p><p><img src="https://cdn.osyb.cn/img/2025/06/072834c906e0001127e83b700dbc7c69.png/blog"></p><h2 id="三、获取密钥信息"><a href="#三、获取密钥信息" class="headerlink" title="三、获取密钥信息"></a>三、获取密钥信息</h2><p>点击 <code>右上角</code>-<code>用户中心</code>-<code>密钥管理</code>，然后根据提示获取密钥（AccessKey &#x2F; SecretKey）</p><p><img src="https://cdn.osyb.cn/img/2025/06/d00003112cb09eae818db37c7df09819.png/blog"></p><p><img src="https://cdn.osyb.cn/img/2025/06/4504c39db8dd895b740cce3c8090744a.png/blog"></p><h2 id="四、配置Qexo"><a href="#四、配置Qexo" class="headerlink" title="四、配置Qexo"></a>四、配置Qexo</h2><p>为了方便演示使用测试数据：<br>AccessKey：3aea5a07hkk6dd167<br>Secretkey：a8ed57e46376ldfhakfte442a21604<br>s3Bucket：s-gz-6666-yuban-xxx-123456789<br>s3Endpoint：<a href="https://cos.ap-xxx.myqcloud.com/">https://cos.ap-xxx.myqcloud.com</a></p><p>在Qexo的设置里，找到图床配置：<br>图床类型：<code>DogeCloud云存储</code><br>DogeCloud_Accesskey：<code>3aea5a07hkk6dd167</code><br>DogeCloud_Secretkey：<code>a8ed57e46376ldfhakfte442a21604</code><br>储存桶名：<code>上传图片的一级目录</code><br>边缘节点：<code>https://s-xx-6666-yuban-xxx-123456789.cos.ap-xxx.myqcloud.com</code><br>保存路径：<a href="https://www.oplog.cn/qexo/configs/upload.html#%E4%BF%9D%E5%AD%98%E8%B7%AF%E5%BE%84">官方文档</a><br>自定义域名：<code>https://储存空间域名/储存桶名/保存路径</code></p><blockquote><p>按道理说储存桶名填 s3Bucket，边缘节点填 s3Endpoint，但是我这样弄了上传图片会报错</p></blockquote><p><img src="https://cdn.osyb.cn/img/2025/06/466d42b66865812f969dbc54d2561bd9.png/blog"></p><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h2><p>在Qexo里面上传一张图片测试，可以看到我的图片链接是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.osyb.cn/img/2025/06/07142d4073fb43a5ad9943e3f9c27d25.png</span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/06/02143b6dd88a361cf58fd042d22cd117.png/blog"></p><h2 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h2><p>我现在用的Qexo版本是 <code>3.6.0</code>，其他版本我没尝试过，不过参数就那么几个，多测试一下就好了</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、创建储存空间&quot;&gt;&lt;a href=&quot;#一、创建储存空间&quot; class=&quot;headerlink&quot; title=&quot;一、创建储存空间&quot;&gt;&lt;/a&gt;一、创建储存空间&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;https://console.dogecloud.com/oss/l</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/categories/Hexo/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Qexo" scheme="https://blog.osyb.cn/tags/Qexo/"/>
    
  </entry>
  
  <entry>
    <title>使用 ja-netfilter 激活 JetBrains 2025 系产品</title>
    <link href="https://blog.osyb.cn/posts/wz-1/"/>
    <id>https://blog.osyb.cn/posts/wz-1/</id>
    <published>2025-06-15T03:28:31.360Z</published>
    <updated>2025-07-18T23:51:16.094Z</updated>
    
    <content type="html"><![CDATA[<p>随着信息化的飞速发展，开发者对高效智能的 IDE 及工具链的依赖日益加深。JetBrains 系列产品凭借卓越的代码分析能力和丰富的插件生态，早已成为程序员日常开发的得力助手。</p><p>然而，随着授权机制的不断升级，传统的激活方式逐渐失效。本文将详细记录如何使用 <strong>ja-netfilter</strong> 工具激活 JetBrains 2025 系列产品，方便后续查阅与复现，仅供学习与研究使用。</p><hr><h2 id="一、下载-ja-netfilter"><a href="#一、下载-ja-netfilter" class="headerlink" title="一、下载 ja-netfilter"></a>一、下载 ja-netfilter</h2><ol><li>打开 <a href="https://jetbra.in/s">jetbra.in&#x2F;s</a>，等待页面中的 <strong>IPFS Checker</strong> 检测完成。<br><img src="https://cdn.osyb.cn/img/2025/06/929df5d05709909ee725df6550756839.png/blog"></li><li>从检测结果中选择任意可用节点，点击进入下载页面。<br><img src="https://cdn.osyb.cn/img/2025/06/811c482c1b92ab8b7e24079f3f00b0d7.png/blog"></li><li>页面顶部找到 <code>jetbra.zip</code>，点击下载。</li></ol><hr><h2 id="二、安装-ja-netfilter"><a href="#二、安装-ja-netfilter" class="headerlink" title="二、安装 ja-netfilter"></a>二、安装 ja-netfilter</h2><ol><li><p>解压下载的 <code>jetbra.zip</code> 文件。</p></li><li><p>进入解压后的 <code>scripts</code> 目录。<br><img src="https://cdn.osyb.cn/img/2025/06/ea0986d0e11f8015956118446d330559.png/blog"></p></li><li><p>根据操作系统执行相应安装脚本：</p><ul><li><strong>Windows</strong>：双击运行 <code>install-all-users.vbs</code></li><li><strong>macOS &#x2F; Linux</strong>：终端执行 <code>install.sh</code></li></ul></li></ol><blockquote><p>💡 建议安装前先运行一次 <code>uninstall</code> 脚本，以避免旧版本残留导致冲突或配置错误。</p></blockquote><ol start="4"><li><p>安装过程中会弹出两个提示框：</p><ul><li>第一个弹窗点击「OK」</li><li>约 1~5 分钟后弹出第二个（内容为 “Dome”），点击「确定」</li></ul></li></ol><hr><h2 id="三、修改-ja-netfilter-配置"><a href="#三、修改-ja-netfilter-配置" class="headerlink" title="三、修改 ja-netfilter 配置"></a>三、修改 ja-netfilter 配置</h2><p>当前版本的 ja-netfilter 尚无法直接激活 JetBrains 2025 系产品，需进行如下配置（任选其一）：</p><h3 id="方式一：使用激活码激活"><a href="#方式一：使用激活码激活" class="headerlink" title="方式一：使用激活码激活"></a>方式一：使用激活码激活</h3><p>编辑 <code>config-jetbrains/url.conf</code> 文件，修改内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[URL]</span></span><br><span class="line">PREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action</span><br><span class="line">PREFIX,https://account.jetbrains.com.cn/lservice/rpc/validateKey.action</span><br></pre></td></tr></table></figure><h3 id="方式二：使用许可证服务器激活"><a href="#方式二：使用许可证服务器激活" class="headerlink" title="方式二：使用许可证服务器激活"></a>方式二：使用许可证服务器激活</h3><p>编辑 <code>config-jetbrains/power.conf</code> 文件，添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Result]</span></span><br><span class="line">EQUAL,74536916935363972062676331234002795978371230636948551293621603151387012525605238437362717321374972744690556736705557452149497519412804345058881400041852152248781442398374098163466582715348121104283019915357094974189947691509248438017494612608877160854463801122408857053592284470003281993552170605889419992023038705192597311510734863341903647703840007318628804558346434827311733144529418566623714199565588181031770613580525237008189903834789078942762034416431160148672791037765767368214813401636365028031639884426126794115842679594980801784389705440469656481098442162146617906382071405164670982777208337204167914289682210535178020557113389359669265657696820776268705339574059938433729991223525911877835862344873763935678384081801004675023491836914378934761006350990456252681113253539880421773642536732092668061722476554573853994961057716516778138273777611940148330085010779542126866978669332562741093267867904170579076109624842072438223356166761104920950156877337904038406782440652886116687382019792158998260619254628867563400170565325011114569375987962380383313040551218643401540538478025122865871047085995035070082930349263334429199533531776938034249083427463322471533034172592961264436973331709502459982433402944574109570528373174,65537,860106576952879101192782278876319243486072481962999610484027161162448933268423045647258145695082284265933019120714643752088997312766689988016808929265129401027490891810902278465065056686129972085119605237470899952751915070244375173428976413406363879128531449407795115913715863867259163957682164040613505040314747660800424242248055421184038777878268502955477482203711835548014501087778959157112423823275878824729132393281517778742463067583320091009916141454657614089600126948087954465055321987012989937065785013284988096504657892738536613208311013047138019418152103262155848541574327484510025594166239784429845180875774012229784878903603491426732347994359380330103328705981064044872334790365894924494923595382470094461546336020961505275530597716457288511366082299255537762891238136381924520749228412559219346777184174219999640906007205260040707839706131662149325151230558316068068139406816080119906833578907759960298749494098180107991752250725928647349597506532778539709852254478061194098069801549845163358315116260915270480057699929968468068015735162890213859113563672040630687357054902747438421559817252127187138838514773245413540030800888215961904267348727206110582505606182944023582459006406137831940959195566364811905585377246353-&gt;31872219281407242025505148642475109331663948030010491344733687844358944945421064967310388547820970408352359213697487269225694990179009814674781374751323403257628081559561462351695605167675284372388551941279783515209238245831229026662363729380633136520288327292047232179909791526492877475417113579821717193807584807644097527647305469671333646868883650312280989663788656507661713409911267085806708237966730821529702498972114194166091819277582149433578383639532136271637219758962252614390071122773223025154710411681628917523557526099053858210363406122853294409830276270946292893988830514538950951686480580886602618927728470029090747400687617046511462665469446846624685614084264191213318074804549715573780408305977947238915527798680393538207482620648181504876534152430149355791756374642327623133843473947861771150672096834149014464956451480803326284417202116346454345929350148770746553056995922154382822307758515805142704373984019252210715650875853634697920708113806880196144197384637328982263167395073688501517286678083973976140696077590122053014085412828620051470085033364773099146103525313018873319293728800442101520384088109603555959893639842091339193916540786143451419950529324231092499266627290477930743308390718116223399064582</span><br><span class="line"></span><br><span class="line"><span class="section">[Result]</span></span><br><span class="line">EQUAL,112461441133519625377278033563377631217080810478044877913003583914648172091738157409921673196502504071932645557170019171979298595709352327802847769722044120499790085741936811108997304158745808767971516913718441191016834227872457230739137340571843164308934558717824577201912443223840644755180769504480393502755952629208233773261062450820065565988008725574313918475968373409242870402643190145552028259314958400337631849159185897138438439875424694124532866781262807038969447273824052492355210186488558693635452115878033675172769234889468457042725838181642541179089465010395802783763203718057315817018322305785075539591970216432243340366977824031569736525928733562828693571820672870610008956717834537299752992483571693698336452716670330967743846098030643538528204645931348565692824365943332663794928836727209414094750075716270817426458443599603160413128062421268628025660472739936815953924643652002565769233074966511472269518005528501545942584021818210587632705524697103775085784867648393186553267468729363798569623027883383917245256650355761359899139236166747130889213713310080522785602644742450625402390645549510027475808490196633734411293566393252889909125865355795314165239971352734320255879462427769889324003845415924485271874702773,65537,657823416415964932845156435107145357714205418747915356734397055242964933221752404166614935255105249101653916721681603662754307632457128805443068644284748929421507178622933348669378235847742899773920765918770105482851534467296284105250512573151705220224379509383835022323282176179690146311979451556541118129344282127375534752754929526193258755897888515754328964698687671896985405008425332766082319260988023654359845072776189451448786758245414253386146246727354454047135428416624852422567360097346671648093064429279847823280592246506886401865455491924420415707803245018138595108029359998829520236522620749918729938206134739331246902031807601266419258080411903201595710155467901291142142443220333539750397923736434950558371997170985472272249812750161962720036837656464089126216749585148030883029438285184930024286517865710539947589764564204842426698322404033441531662829238875205420761652375337327297032255730262635511533223504109798364923988127319356119135982652788834405038113746394301957551167740345788175766290794604666781402329824924118191746319728033878045396093674696713022814027690165596773992550010915823534552020920573926469894452526033833249442230929742486602298477270672101197444729222659891038350303699501280729658274069437-&gt;31872219281407242025505148642475109331663948030010491344733687844358944945421064967310388547820970408352359213697487269225694990179009814674781374751323403257628081559561462351695605167675284372388551941279783515209238245831229026662363729380633136520288327292047232179909791526492877475417113579821717193807584807644097527647305469671333646868883650312280989663788656507661713409911267085806708237966730821529702498972114194166091819277582149433578383639532136271637219758962252614390071122773223025154710411681628917523557526099053858210363406122853294409830276270946292893988830514538950951686480580886602618927728470029090747400687617046511462665469446846624685614084264191213318074804549715573780408305977947238915527798680393538207482620648181504876534152430149355791756374642327623133843473947861771150672096834149014464956451480803326284417202116346454345929350148770746553056995922154382822307758515805142704373984019252210715650875853634697920708113806880196144197384637328982263167395073688501517286678083973976140696077590122053014085412828620051470085033364773099146103525313018873319293728800442101520384088109603555959893639842091339193869176761112940712068557597508317971649031214973881730692211411295733498836914</span><br></pre></td></tr></table></figure><p>配置保存后，重启正在运行的 JetBrains IDE，ja-netfilter 将自动加载新配置。</p><hr><h2 id="四、激活-IDE"><a href="#四、激活-IDE" class="headerlink" title="四、激活 IDE"></a>四、激活 IDE</h2><h3 id="方式一：激活码激活"><a href="#方式一：激活码激活" class="headerlink" title="方式一：激活码激活"></a>方式一：激活码激活</h3><ol><li>打开 jetbra.zip 下载页，选择对应的 IDE</li><li>复制提供的激活码并在 IDE 中粘贴激活即可<br><img src="https://cdn.osyb.cn/img/2025/06/20e4a34be4e20f2b7ab301273c877930.png/blog"></li></ol><h3 id="方式二：许可证服务器激活"><a href="#方式二：许可证服务器激活" class="headerlink" title="方式二：许可证服务器激活"></a>方式二：许可证服务器激活</h3><p>在 IDE 激活窗口填写以下服务器地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ls.justtonight.monster/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/06/87a60ec3ad94aa34042adaf4d040e2cc.png/blog"></p><hr><h2 id="五、激活码无效？尝试以下操作"><a href="#五、激活码无效？尝试以下操作" class="headerlink" title="五、激活码无效？尝试以下操作"></a>五、激活码无效？尝试以下操作</h2><h3 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h3><ol><li>删除以下文件后重试：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%APPDATA%\JetBrains\&lt;IDE+版本&gt;\&lt;IDE&gt;.key               ← 必删</span><br><span class="line">%APPDATA%\JetBrains\&lt;IDE+版本&gt;\plugin_PCWMP.license    ← 如存在</span><br></pre></td></tr></table></figure><ol start="2"><li>如仍失败，可删除以下目录（注意：将清空 IDE 设置）：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%APPDATA%\JetBrains</span><br><span class="line">%LOCALAPPDATA%\JetBrains\</span><br></pre></td></tr></table></figure><h3 id="Linux-macOS-用户"><a href="#Linux-macOS-用户" class="headerlink" title="Linux &#x2F; macOS 用户"></a>Linux &#x2F; macOS 用户</h3><ol><li>删除以下目录：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/.config/JetBrains/</span><br><span class="line">~/.cache/JetBrains/</span><br></pre></td></tr></table></figure><hr><h2 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h2><p>参考来源：<a href="https://blog.cxzlw.top/2024/10/22/jetbrains-202423/">创新者老王的博客</a><br>附件：修改后的 <a href="https://cdn.osyb.cn/tool/jetbra.zip">jetbra.zip</a></p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。<br>建议有条件者通过 JetBrains 官方的 <a href="https://www.jetbrains.com/community/education/">学生授权</a> 或 <a href="https://www.jetbrains.com/pricing/">个人订阅计划</a> 获取正版许可。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着信息化的飞速发展，开发者对高效智能的 IDE 及工具链的依赖日益加深。JetBrains 系列产品凭借卓越的代码分析能力和丰富的插件生态，早已成为程序员日常开发的得力助手。&lt;/p&gt;
&lt;p&gt;然而，随着授权机制的不断升级，传统的激活方式逐渐失效。本文将详细记录如何使用 &lt;s</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="JetBrains" scheme="https://blog.osyb.cn/tags/JetBrains/"/>
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
</feed>
