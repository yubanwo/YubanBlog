<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>渝伴的小窝</title>
  
  <subtitle>寻找属于自己的宁静角落</subtitle>
  <link href="https://blog.osyb.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.osyb.cn/"/>
  <updated>2025-08-09T08:45:46.006Z</updated>
  <id>https://blog.osyb.cn/</id>
  
  <author>
    <name>Yuban</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025 年站长必学的 5 个 ChatGPT SEO 用法</title>
    <link href="https://blog.osyb.cn/posts/wz-21/"/>
    <id>https://blog.osyb.cn/posts/wz-21/</id>
    <published>2025-08-09T08:25:43.749Z</published>
    <updated>2025-08-09T08:45:46.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2025 年，AI 已经彻底改变了 SEO 的玩法。ChatGPT 不仅能写文章、做摘要，还能帮站长快速制定内容策略、提升网站权重。今天我就分享 5 个<strong>实用且可落地</strong>的 ChatGPT SEO 用法，让你的内容更高效、流量更稳定。</p><hr><h2 id="一、批量生成长尾关键词内容"><a href="#一、批量生成长尾关键词内容" class="headerlink" title="一、批量生成长尾关键词内容"></a>一、批量生成长尾关键词内容</h2><p>长尾关键词是 SEO 的流量宝藏，但人工挖掘费时费力。<br><strong>用法</strong>：  </p><ol><li>输入你的主关键词，例如“网站加速”  </li><li>让 ChatGPT 列出与该词相关的 50-100 个长尾关键词  </li><li>按主题分组，批量生成文章大纲甚至完整初稿</li></ol><p><strong>示例 Prompt</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">帮我生成50个与“网站加速”相关的长尾关键词，并按搜索意图分类。</span><br></pre></td></tr></table></figure><p>这样不仅能迅速覆盖多个搜索入口，还能增加内链结构的丰富度。</p><hr><h2 id="二、自动优化文章标题与-Meta-Description"><a href="#二、自动优化文章标题与-Meta-Description" class="headerlink" title="二、自动优化文章标题与 Meta Description"></a>二、自动优化文章标题与 Meta Description</h2><p>搜索引擎点击率（CTR）很大程度取决于标题和描述。<br><strong>用法</strong>：  </p><ul><li>将现有标题交给 ChatGPT，让它在保留关键词的同时优化可读性  </li><li>自动生成 155 字以内的 Meta Description，兼顾关键词与吸引力</li></ul><p><strong>示例 Prompt</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">帮我优化标题“网站访问速度优化技巧”，要求：保留核心关键词，增加吸引力。</span><br></pre></td></tr></table></figure><hr><h2 id="三、重写旧内容，提高原创度与排名"><a href="#三、重写旧内容，提高原创度与排名" class="headerlink" title="三、重写旧内容，提高原创度与排名"></a>三、重写旧内容，提高原创度与排名</h2><p>旧文章可能已经被搜索引擎判定为过时内容或原创度低。<br><strong>用法</strong>：  </p><ul><li>将旧文章分段输入 ChatGPT  </li><li>要求改写内容、调整语序、增加最新数据或案例  </li><li>保留关键词和核心信息，避免与原文重复率过高</li></ul><p>这样既能让文章重新被索引，又能提升整体质量分数。</p><hr><h2 id="四、自动生成文章配图描述（Alt-标签）"><a href="#四、自动生成文章配图描述（Alt-标签）" class="headerlink" title="四、自动生成文章配图描述（Alt 标签）"></a>四、自动生成文章配图描述（Alt 标签）</h2><p>SEO 不只是文字，图片的 Alt 标签同样重要。<br><strong>用法</strong>：  </p><ul><li>将图片主题输入 ChatGPT，让它生成简洁且包含关键词的 Alt 描述  </li><li>批量处理站点内的图片，提升图片搜索流量</li></ul><p><strong>示例 Prompt</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">帮我为一张“网站访问统计图”生成SEO友好的图片Alt描述。</span><br></pre></td></tr></table></figure><hr><h2 id="五、内链与内容结构优化"><a href="#五、内链与内容结构优化" class="headerlink" title="五、内链与内容结构优化"></a>五、内链与内容结构优化</h2><p>ChatGPT 可以根据你的文章内容，自动生成内部链接建议和文章结构优化方案。<br><strong>用法</strong>：  </p><ul><li>将文章全文贴给 ChatGPT  </li><li>要求它在适当位置添加链接建议（指向站内相关内容）  </li><li>同时优化小标题层级，增强可读性和 SEO 结构</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>ChatGPT 已经不只是一个聊天机器人，而是一个功能全面的 SEO 助手。<br>用它做 SEO，不是让 AI 取代你，而是让它帮你节省大量重复劳动，把更多精力放在内容策略与用户体验上。</p><p><strong>行动建议</strong>：<br>今天就选一个你网站上的旧文章，用以上任意一个方法优化，并观察 1-2 周的流量变化。你会发现 AI 带来的提升是立竿见影的。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文介绍了 2025 年站长必学的 5 个 ChatGPT SEO 用法，包括长尾关键词挖掘、Meta 信息优化、旧内容改写、图片 Alt 标签生成、内链结构优化等实用技巧。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="SEO" scheme="https://blog.osyb.cn/categories/SEO/"/>
    
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="ChatGPT" scheme="https://blog.osyb.cn/tags/ChatGPT/"/>
    
    <category term="SEO" scheme="https://blog.osyb.cn/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客安装与配置 RSS 插件，轻松生成订阅源</title>
    <link href="https://blog.osyb.cn/posts/wz-20/"/>
    <id>https://blog.osyb.cn/posts/wz-20/</id>
    <published>2025-08-08T08:25:43.749Z</published>
    <updated>2025-08-08T08:45:46.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Hexo 中使用 RSS 插件可以为你的博客生成一个 RSS 或 Atom 格式的订阅源文件，方便读者通过 RSS 阅读器订阅你的文章更新。本文将介绍如何在 Hexo 博客中安装和配置 RSS 插件。</p><h2 id="一、安装-Hexo-RSS-插件"><a href="#一、安装-Hexo-RSS-插件" class="headerlink" title="一、安装 Hexo RSS 插件"></a>一、安装 Hexo RSS 插件</h2><p>首先，你需要通过 npm 安装 Hexo 的 RSS 生成插件。在你的 Hexo 项目的根目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>安装完成后，Hexo 会自动将插件添加到你的 package.json 文件中。</p><hr><h2 id="二、配置-RSS-插件"><a href="#二、配置-RSS-插件" class="headerlink" title="二、配置 RSS 插件"></a>二、配置 RSS 插件</h2><p>打开你的 Hexo 项目中的 <code>_config.yml</code> 文件，在其中添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="配置解释："><a href="#配置解释：" class="headerlink" title="配置解释："></a>配置解释：</h3><ul><li><code>type</code>: 生成的订阅源类型，可选 <code>atom</code> 或 <code>rss2</code>。</li><li><code>path</code>: 生成的订阅源文件路径，默认 <code>atom.xml</code> 或 <code>rss2.xml</code>。</li><li><code>limit</code>: 输出的文章数量限制，<code>0</code> 表示不限制。</li><li><code>hub</code>: PubSubHubbub 地址，可留空。</li><li><code>content</code>: 是否在订阅源中包含全文，<code>true</code> 表示包含全文，<code>false</code> 仅包含摘要。</li></ul><hr><h2 id="三、生成-RSS-文件"><a href="#三、生成-RSS-文件" class="headerlink" title="三、生成 RSS 文件"></a>三、生成 RSS 文件</h2><p>配置完成后，运行 Hexo 的生成命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="comment">## 或者</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>该命令会在 <code>public</code> 文件夹中生成一个 <code>atom.xml</code> 或 <code>rss2.xml</code> 文件，里面包含你博客文章的订阅源数据。</p><hr><h2 id="四、测试和使用订阅源"><a href="#四、测试和使用订阅源" class="headerlink" title="四、测试和使用订阅源"></a>四、测试和使用订阅源</h2><p>你可以在浏览器中访问生成的 RSS 文件，确保它正常生成并能被 RSS 阅读器识别。路径通常为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourdomain.com/atom.xml</span><br></pre></td></tr></table></figure><p>如果你的博客已经部署到线上，读者就可以通过这个地址订阅你的更新。</p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过以上步骤，你已经成功为 Hexo 博客安装并配置了 RSS 插件，让读者可以方便地订阅你的文章更新。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文详细介绍了如何在 Hexo 博客中安装和配置 RSS 插件，以生成包含网站文章订阅源的 RSS 文件，方便读者订阅你的博客更新。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/categories/Hexo/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>自建 Busuanzi：高性能网站访问统计服务</title>
    <link href="https://blog.osyb.cn/posts/wz-19/"/>
    <id>https://blog.osyb.cn/posts/wz-19/</id>
    <published>2025-07-31T08:13:53.878Z</published>
    <updated>2025-07-31T09:17:08.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不蒜子（Busuanzi）一直是我最常用的静态网站访问统计工具：无需注册、零配置，只需嵌入一段 <code>&lt;script&gt;</code>，即可显示页面访问量（PV）和访客数（UV），用起来非常方便。</p><p>不过，随着网站访问量的增长，我越来越频繁地遇到两个问题：</p><ul><li><strong>加载延迟大</strong>：统计数据经常延迟 2～5 秒才出现，有时甚至完全加载失败；</li><li><strong>服务不稳定</strong>：Busuanzi 后端依赖第三方服务（如早期的 LeanCloud），维护成本高，也偶尔出现服务宕机，导致数据无法加载。</li></ul><p>于是我决定动手：<strong>自建一个 Busuanzi 后端，接口完全兼容原版，但性能更高、数据更稳，还能自由扩展逻辑。</strong></p><hr><h2 id="我的目标"><a href="#我的目标" class="headerlink" title="我的目标"></a>我的目标</h2><ul><li><strong>接口无缝替换</strong>：前端无需修改逻辑，只需更换请求地址；</li><li><strong>高性能响应</strong>：支持高并发、Redis 缓存加速；</li><li><strong>数据持久可靠</strong>：实时记录 PV&#x2F;UV，定期批量写入 PostgreSQL；</li><li><strong>兼容 JSONP</strong>：保持 <code>&lt;script src=...&gt;</code> 引入方式；</li><li><strong>准确 UV 去重</strong>：基于 Cookie 与 Redis 实现按天去重；</li></ul><hr><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>我使用 Go 语言编写后端服务，结合 Redis 与 PostgreSQL，打造一个轻量、稳定、可扩展的访问统计系统：</p><table><thead><tr><th>模块</th><th>技术实现</th></tr></thead><tbody><tr><td>Web 框架</td><td>Gin</td></tr><tr><td>缓存机制</td><td>Redis</td></tr><tr><td>数据存储</td><td>PostgreSQL</td></tr><tr><td>UV 去重机制</td><td>Cookie + Redis Set</td></tr><tr><td>防击穿方案</td><td>singleflight</td></tr><tr><td>写入优化</td><td>异步批量入库</td></tr><tr><td>数据返回格式</td><td>JSONP callback 支持</td></tr></tbody></table><hr><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>前端代码<strong>无需改动</strong>，只需替换默认接口地址为自建服务地址即可：</p><h3 id="官方默认引入方式"><a href="#官方默认引入方式" class="headerlink" title="官方默认引入方式"></a>官方默认引入方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="替换为自建服务"><a href="#替换为自建服务" class="headerlink" title="替换为自建服务"></a>替换为自建服务</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.osyb.cn/static/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你是手动拼接接口调用的方式：</p><p>将以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback</span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api.osyb.cn/busuanzi?jsonpCallback=BusuanziCallback</span><br></pre></td></tr></table></figure><hr><h2 id="在安知鱼主题中如何使用？"><a href="#在安知鱼主题中如何使用？" class="headerlink" title="在安知鱼主题中如何使用？"></a>在安知鱼主题中如何使用？</h2><p>进入主题配置文件（<code>_config.yml</code>），找到末尾的 CDN 设置部分，改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CDN:</span> </span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">    <span class="attr">busuanzi:</span> <span class="string">https://cdn.osyb.cn/static/busuanzi/2.3/busuanzi.pure.mini.js</span></span><br></pre></td></tr></table></figure><p>保存配置并重新部署即可生效。</p><p><img src="https://cdn.osyb.cn/img/2025/08/5b39ac0370dbc6ee6dda1f269b9ac899.png/blog" alt="主题配置截图"></p><hr><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><a href="https://busuanzi.ibruce.info/">官方文档</a></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不蒜子确实好用，但原服务的延迟和不稳定问题逐渐成为瓶颈。通过自建兼容接口，不仅可以解决加载慢、服务不稳的问题，还能做到更强的扩展性和数据可控性。如果你也在用不蒜子，不妨尝试换用我这个优化版本，体验更快、更稳的访问统计服务。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文介绍如何自建一个兼容 Busuanzi 的高性能网站访问统计服务，基于 Go、Redis 和 PostgreSQL 实现，支持 JSONP 接口、UV 去重和高并发缓存，解决官方服务延迟高、不稳定等问题。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="建站笔记" scheme="https://blog.osyb.cn/categories/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Whistle 网络调试工具安装与使用指南</title>
    <link href="https://blog.osyb.cn/posts/wz-18/"/>
    <id>https://blog.osyb.cn/posts/wz-18/</id>
    <published>2025-07-28T01:02:49.536Z</published>
    <updated>2025-07-28T01:37:01.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Whistle 是一个基于 Node.js 的网络调试工具，能够帮助开发人员快速捕获和修改网络请求。它支持代理、抓包、模拟响应等功能，广泛用于调试和开发 Web 应用。</p><hr><h2 id="一、环境要求"><a href="#一、环境要求" class="headerlink" title="一、环境要求"></a>一、环境要求</h2><ul><li><strong>Node.js</strong> 版本 12 及以上</li><li><strong>npm</strong> 或 <strong>yarn</strong> 包管理工具</li></ul><hr><h2 id="二、安装-Whistle"><a href="#二、安装-Whistle" class="headerlink" title="二、安装 Whistle"></a>二、安装 Whistle</h2><h3 id="1-使用-npm-安装"><a href="#1-使用-npm-安装" class="headerlink" title="1. 使用 npm 安装"></a>1. 使用 npm 安装</h3><p>打开终端，执行以下命令安装 Whistle：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g whistle</span><br></pre></td></tr></table></figure><hr><h3 id="2-使用-yarn-安装"><a href="#2-使用-yarn-安装" class="headerlink" title="2. 使用 yarn 安装"></a>2. 使用 yarn 安装</h3><p>如果你使用 yarn，可以执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add whistle</span><br></pre></td></tr></table></figure><hr><h2 id="三、启动-Whistle"><a href="#三、启动-Whistle" class="headerlink" title="三、启动 Whistle"></a>三、启动 Whistle</h2><p>安装完成后，可以通过以下命令启动 Whistle：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w2 start</span><br></pre></td></tr></table></figure><p>默认情况下，Whistle 会监听在 <a href="https://localhost:8899/">localhost:8899</a>。你可以通过浏览器访问它的管理界面，进行进一步的配置。</p><hr><h2 id="四、配置代理"><a href="#四、配置代理" class="headerlink" title="四、配置代理"></a>四、配置代理</h2><p>Whistle 会自动配置代理，你只需要设置你的设备或浏览器代理为 Whistle 监听的地址（默认 localhost:8899）。</p><p>在浏览器或设备的代理设置中，设置 HTTP 和 HTTPS 代理地址为 localhost，端口为 8899。</p><hr><h2 id="五、使用-Whistle"><a href="#五、使用-Whistle" class="headerlink" title="五、使用 Whistle"></a>五、使用 Whistle</h2><p>抓包: 在 Whistle 的管理界面，你可以查看所有的 HTTP 请求和响应，甚至可以修改它们。</p><p>模拟响应: 你可以创建自定义的规则，模拟特定请求的响应。</p><p>修改请求: 通过规则，可以拦截并修改请求内容。</p><hr><h2 id="六、升级-Whistle"><a href="#六、升级-Whistle" class="headerlink" title="六、升级 Whistle"></a>六、升级 Whistle</h2><p>Whistle 支持通过 npm 或 yarn 进行升级。可以通过以下命令检查是否有新版本并进行更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm update -g whistle</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">yarn global upgrade whistle</span><br></pre></td></tr></table></figure><hr><h2 id="七、卸载-Whistle"><a href="#七、卸载-Whistle" class="headerlink" title="七、卸载 Whistle"></a>七、卸载 Whistle</h2><p>如果你不再需要使用 Whistle，可以通过以下命令卸载它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g whistle</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn global remove whistle</span><br></pre></td></tr></table></figure><hr><h2 id="八、常见问题"><a href="#八、常见问题" class="headerlink" title="八、常见问题"></a>八、常见问题</h2><blockquote><p>为什么 Whistle 无法启动？</p></blockquote><ul><li>确保你的系统已安装 Node.js 和 npm。</li><li>检查端口 8899 是否被其他程序占用。</li></ul><hr><h2 id="九、项目地址"><a href="#九、项目地址" class="headerlink" title="九、项目地址"></a>九、项目地址</h2><ul><li><a href="https://github.com/avwo/whistle">GitHub 仓库</a></li><li><a href="https://">Whistle 官方文档</a></li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Whistle 是一个简便高效的网络调试工具，适用于捕获和修改网络请求。它帮助开发者快速调试 Web 应用。安装和配置都非常简单，能够提高开发效率。如果遇到问题，可以参考官方文档或寻求社区帮助。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文介绍了 Whistle 网络调试工具的安装与使用方法，包括环境要求、配置代理、抓包、模拟响应等功能，帮助开发者快速调试和修改网络请求。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="开源项目" scheme="https://blog.osyb.cn/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="开源项目" scheme="https://blog.osyb.cn/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="Node.js" scheme="https://blog.osyb.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客安装与配置 Sitemap 插件，轻松生成网站地图</title>
    <link href="https://blog.osyb.cn/posts/wz-17/"/>
    <id>https://blog.osyb.cn/posts/wz-17/</id>
    <published>2025-07-27T08:25:43.749Z</published>
    <updated>2025-07-27T08:45:46.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Hexo 中使用 Sitemap 插件可以帮助你生成一个包含你网站页面的 Sitemap 文件，并且方便搜索引擎爬虫进行索引。本文将为你介绍如何在 Hexo 博客中安装和配置 Sitemap 插件。</p><h2 id="一、安装-Hexo-Sitemap-插件"><a href="#一、安装-Hexo-Sitemap-插件" class="headerlink" title="一、安装 Hexo Sitemap 插件"></a>一、安装 Hexo Sitemap 插件</h2><p>首先，你需要通过 npm 安装 Hexo Sitemap 插件。在你的 Hexo 项目的根目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>安装完成后，Hexo 会自动将插件添加到你的 package.json 文件中。</p><hr><h2 id="二、配置-Sitemap-插件"><a href="#二、配置-Sitemap-插件" class="headerlink" title="二、配置 Sitemap 插件"></a>二、配置 Sitemap 插件</h2><p>接下来，你需要在 Hexo 的配置文件中启用该插件。打开你的 Hexo 项目中的 _config.yml 文件，手动添加以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  priority: 0.5</span><br><span class="line">  changefreq: daily</span><br><span class="line">  lastmod: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="配置解释："><a href="#配置解释：" class="headerlink" title="配置解释："></a>配置解释：</h3><ul><li><code>path</code>: 生成的 Sitemap 文件名，默认为 <code>sitemap.xml</code>。</li><li><code>priority</code>: 该页面的优先级，数值范围为 0.0 到 1.0，默认值为 0.5。</li><li><code>changefreq</code>: 页面更新频率，可以是 <code>always</code>, <code>hourly</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>, <code>yearly</code>, <code>never</code> 中的一个。默认值为 <code>daily</code>。</li><li><code>lastmod</code>: 是否包含页面的最后修改时间。默认值为 <code>true</code>。</li></ul><hr><h2 id="三、生成-Sitemap-文件"><a href="#三、生成-Sitemap-文件" class="headerlink" title="三、生成 Sitemap 文件"></a>三、生成 Sitemap 文件</h2><p>配置完成后，运行 Hexo 的 generate 命令来生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="comment">## 或者</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>该命令会生成一个包含所有页面链接的 sitemap.xml 文件，存放在 Hexo 项目的 public 文件夹中。</p><hr><h2 id="四、测试和提交到搜索引擎"><a href="#四、测试和提交到搜索引擎" class="headerlink" title="四、测试和提交到搜索引擎"></a>四、测试和提交到搜索引擎</h2><p>你可以在浏览器中访问生成的 Sitemap 文件，确保它正确生成并能正常打开。路径通常为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourdomain.com/sitemap.xml</span><br></pre></td></tr></table></figure><p>如果你的站点已经发布到网上，可以将这个 Sitemap 提交到搜索引擎，以帮助它们更好地索引你的内容。</p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过以上步骤，你已经成功在 Hexo 中安装并配置了 Sitemap 插件，帮助你的博客在搜索引擎中获得更好的索引效果。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文详细介绍了如何在 Hexo 博客中安装和配置 Sitemap 插件，以生成包含网站页面的 Sitemap 文件，帮助搜索引擎更好地索引网站内容。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/categories/Hexo/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用 EdgeOne 免费 CDN 加速 Hexo 博客体验分享</title>
    <link href="https://blog.osyb.cn/posts/wz-16/"/>
    <id>https://blog.osyb.cn/posts/wz-16/</id>
    <published>2025-07-24T08:42:28.349Z</published>
    <updated>2025-07-28T01:34:09.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，我的网站其实一直处于“裸奔”状态：国内只有一个节点，国外也只有一个，访问速度时快时慢，安全性也没啥保障。后来在一个交流群看到有朋友提到 <strong>EdgeOne</strong> 提供免费套餐使用，我立马就去官网看了看。</p><p>EdgeOne 的免费套餐需要兑换码，在他们的<a href="https://edgeone.ai/zh/redemption">免费计划兑换页</a>上可以看到获取方式主要有三种：</p><ul><li>在 X（推特）平台上分享；</li><li>加入官方 Discord 社区参与活动；</li><li>参与 GitHub 开发者合作计划。</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/0f0eec8e1c8365c4f9eebce1b72cbc50.png/blog" alt="EdgeOne 兑换方式图示"></p><p>刚好我注册 Discord 社区的时候，他们正在发放兑换码，我手速比较快，居然抢到了一个！</p><p>因为我的域名已经备案，而且确实有国内加速的刚需，所以我就直接前往<a href="https://cloud.tencent.com/act/cps/redirect?redirect=37472&cps_key=90c2058195d5c9d09f2e966dbe776eff">腾讯云中国站</a>绑定兑换码并开通套餐，整个过程非常顺利。</p><p>目前 EdgeOne 还推出了一个新活动：<a href="https://edgeone.ai/zh/get-free-plan">测速赢免费套餐</a>，提供更简单的获取方式，可以通过测速工具一键申请，对新用户非常友好。</p><p><img src="https://cdn.osyb.cn/img/2025/07/708b60aef619c57a057e1176f993d461.png/blog" alt="测速赢免费套餐活动页"></p><hr><h2 id="接入方式：CNAME-接入，简单高效"><a href="#接入方式：CNAME-接入，简单高效" class="headerlink" title="接入方式：CNAME 接入，简单高效"></a>接入方式：CNAME 接入，简单高效</h2><p>我使用的是 <strong>CNAME 接入</strong>（也就是不更换 NS），好处是方便、风险小、兼容性高。配置完源站和代理规则后，几分钟内 CDN 就开始生效了。</p><hr><h2 id="Ping-测速对比：效果直观"><a href="#Ping-测速对比：效果直观" class="headerlink" title="Ping 测速对比：效果直观"></a>Ping 测速对比：效果直观</h2><p>我用的是 <a href="https://boce.aliyun.com/detect/ping">阿里云网站运维检测平台</a> 来测试国内外访问延迟情况。</p><p>使用 EdgeOne 之后的 ping 数据：</p><p><img src="https://cdn.osyb.cn/img/2025/07/fe6f6b8c87d75b67c6eda39bbce3e7e8.png/blog" alt="使用 CDN 后 Ping 结果"></p><p>未使用 EdgeOne 之前：</p><p><img src="https://cdn.osyb.cn/img/2025/07/f656fe01b79b85b5d1ede12dcac7819d.png/blog" alt="使用 CDN 前 Ping 结果"></p><p>合图直观对比：</p><p><img src="https://cdn.osyb.cn/img/2025/07/bdfc069559aac4ece826b9805cd47dac.png/blog" alt="Ping 前后对比合图"></p><p>从图中可以明显看到，<strong>国外检测节点延迟非常高</strong>，而加了 EdgeOne CDN 后，平均 ping 延迟大幅下降，稳定在 76ms 左右，非常理想。</p><hr><h2 id="HTTP-测速对比：网页响应快了很多"><a href="#HTTP-测速对比：网页响应快了很多" class="headerlink" title="HTTP 测速对比：网页响应快了很多"></a>HTTP 测速对比：网页响应快了很多</h2><p>为了进一步验证，我又做了 HTTP 页面加载测速。</p><p>加速后：</p><p><img src="https://cdn.osyb.cn/img/2025/07/0e3299d800333d65ac15bac87b318ac1.png/blog" alt="HTTP 加速后"></p><p>加速前：</p><p><img src="https://cdn.osyb.cn/img/2025/07/5234fa79833ea6659f02b93dc3ab1acd.png/blog" alt="HTTP 加速前"></p><p>合图对比：</p><p><img src="https://cdn.osyb.cn/img/2025/07/0c4286f403bf8e2712aed6bf59079f1e.png/blog" alt="HTTP 前后对比合图"></p><p>可以看到，加速后的加载时间在多个全球节点都大大缩短了，<strong>无论国内还是海外，打开网站都变快了许多</strong>。</p><hr><h2 id="总结：Hexo-静态博客配合-CDN-效果极佳"><a href="#总结：Hexo-静态博客配合-CDN-效果极佳" class="headerlink" title="总结：Hexo 静态博客配合 CDN 效果极佳"></a>总结：Hexo 静态博客配合 CDN 效果极佳</h2><p>我这个站是 Hexo 构建的静态博客，本身已经比较轻量了，但加上 EdgeOne CDN 后：</p><ul><li>页面加载速度更快了；</li><li>国外访问体验大幅提升；</li><li>防护能力更强，支持 WAF 和 DDoS 防护；</li><li>还有详细的访问日志和状态码分析。</li></ul><p>总之，<strong>EdgeOne 免费 CDN 套餐非常适合像我这样的小站站长，尤其是备案域名、想在国内提速的场景</strong>。如果你正好也有类似需求，非常建议体验一下！</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文分享了个人站长通过使用腾讯云 EdgeOne 免费 CDN 套餐，实现网站国内外访问速度显著提升的经历。详细展示了接入方式、测速对比图及使用体验，适合运行静态博客如 Hexo 的站长参考。</summary>
    
    
    
    <category term="建站笔记" scheme="https://blog.osyb.cn/categories/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="CDN" scheme="https://blog.osyb.cn/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>Alist 未来不确定？试试开源替代方案 OpenAlist</title>
    <link href="https://blog.osyb.cn/posts/wz-15/"/>
    <id>https://blog.osyb.cn/posts/wz-15/</id>
    <published>2025-07-22T09:07:53.966Z</published>
    <updated>2025-07-27T07:35:31.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近，关于 <strong>Alist 被收购</strong> 的消息在社区中引起了广泛关注。尽管官方尚未发布明确声明，但从版本更新、GitHub 活动以及部分用户反馈来看，Alist 的发展方向可能正在发生变化。这让许多使用者对其未来的开源性质和可控性产生了疑虑。</p><h2 id="Alist-是什么？"><a href="#Alist-是什么？" class="headerlink" title="Alist 是什么？"></a>Alist 是什么？</h2><p>Alist 是一个轻量级、支持多种网盘挂载的目录索引程序，凭借以下优点在国内外圈子中迅速走红：</p><ul><li>支持阿里云盘、OneDrive、Google Drive 等多种网盘；</li><li>简洁美观的前端页面；</li><li>支持 API、Docker 部署；</li><li>开源、社区活跃。</li></ul><p>然而，近期一些变化引发了担忧——包括更新频率下降、部分私有特性未开源、社区维护者减少等。</p><h2 id="为什么我们需要替代方案？"><a href="#为什么我们需要替代方案？" class="headerlink" title="为什么我们需要替代方案？"></a>为什么我们需要替代方案？</h2><p>开源项目一旦被商业公司收购或介入，可能会出现以下情况：</p><ul><li>部分功能转为 <strong>付费订阅</strong>；</li><li>核心功能逐渐闭源；</li><li>隐私和数据使用策略发生改变；</li><li>社区支持削弱，维护停滞。</li></ul><p>为确保系统的可持续性和自主可控性，我们建议开始关注并尝试一个强有力的替代方案 —— <strong>OpenAlist</strong>。</p><hr><h2 id="什么是-OpenAlist？"><a href="#什么是-OpenAlist？" class="headerlink" title="什么是 OpenAlist？"></a>什么是 OpenAlist？</h2><p><strong>OpenAlist</strong> 是由社区主导维护的 Alist 分支（或重构项目），旨在保留 Alist 的核心功能，并持续开源、透明地发展。</p><h3 id="特性亮点："><a href="#特性亮点：" class="headerlink" title="特性亮点："></a>特性亮点：</h3><ul><li>完全开源，遵循 MIT 协议；</li><li>保留原有网盘支持（阿里云盘、OneDrive、天翼云等）；</li><li>更快的加载速度与简化的依赖；</li><li>更清晰的权限系统与插件机制；</li><li>接口兼容原 Alist，大部分原配置文件可无缝迁移；</li></ul><hr><h2 id="如何迁移到-OpenAlist？"><a href="#如何迁移到-OpenAlist？" class="headerlink" title="如何迁移到 OpenAlist？"></a>如何迁移到 OpenAlist？</h2><ol><li><strong>备份你的 Alist 配置文件</strong>；</li><li>前往 <a href="https://github.com/OpenListTeam/OpenList">OpenAlist 项目主页</a> 下载最新版本；</li><li>按照文档部署（支持 Docker、一键脚本、本地运行）；</li><li>将原有配置导入，测试功能是否正常；</li><li>升级你的前端模板（如有自定义）以适配 OpenAlist；</li></ol><hr><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><a href="https://github.com/OpenListTeam/OpenList">Github 仓库</a></li><li><a href="https://oplist.org/zh/">官方文档</a></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们尊重任何开发者对其项目的商业选择，但也应意识到：<strong>自由、开放、可控</strong> 才是开源社区的核心价值。</p><p><strong>OpenAlist</strong> 是当前最接近 Alist 的社区替代方案，不论你是普通用户还是开发者，现在都是尝试的好时机。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">Alist 近期被收购的传闻引发了社区对其未来开源性与可控性的担忧。本文介绍了由社区主导开发的 OpenAlist 项目，作为 Alist 的开源替代方案，提供迁移指南、特性亮点及相关链接，适合希望持续使用开源网盘目录索引工具的用户参考。</summary>
    
    
    
    <category term="Docker" scheme="https://blog.osyb.cn/categories/Docker/"/>
    
    <category term="开源项目" scheme="https://blog.osyb.cn/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Docker" scheme="https://blog.osyb.cn/tags/Docker/"/>
    
    <category term="开源项目" scheme="https://blog.osyb.cn/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>用 Qexo 管理 Hexo 博客，实现 GitHub 自动部署一条龙</title>
    <link href="https://blog.osyb.cn/posts/wz-14/"/>
    <id>https://blog.osyb.cn/posts/wz-14/</id>
    <published>2025-07-20T07:43:24.344Z</published>
    <updated>2025-07-26T10:07:13.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 是一款广受欢迎的静态博客框架，但默认使用本地命令行进行文章编写和部署，使用门槛略高。本文将介绍如何借助 Qexo 构建一个图形化的 Hexo 后台管理界面，并结合 GitHub Actions 实现自动部署，打造“一条龙”博客写作与发布流程。</p><hr><h2 id="项目亮点"><a href="#项目亮点" class="headerlink" title="项目亮点"></a>项目亮点</h2><ul><li><strong>图形化后台</strong>：Qexo 提供 Web 编辑器，支持可视化写作与管理文章</li><li><strong>自动化部署</strong>：每次提交文章后自动触发 GitHub Actions，实现自动部署</li><li><strong>免本地操作</strong>：无需命令行，打开浏览器即可完成写作、提交与部署流程</li></ul><hr><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>请先参考上一篇文章 <a href="https://blog.osyb.cn/posts/wz-13/">使用 GitHub Actions 自动部署 Hexo 博客</a>，完成 Hexo 博客的 GitHub Pages 自动部署配置。</p><hr><h2 id="二、部署-Qexo-后台"><a href="#二、部署-Qexo-后台" class="headerlink" title="二、部署 Qexo 后台"></a>二、部署 Qexo 后台</h2><p><strong>Qexo</strong> 是一个快速、强大、美观的在线 <strong>静态博客编辑器</strong>。</p><h3 id="1-安装-Qexo"><a href="#1-安装-Qexo" class="headerlink" title="1. 安装 Qexo"></a>1. 安装 Qexo</h3><p>详细安装方法请参考 <a href="https://oplog.cn/">Qexo 官方文档</a>。</p><h3 id="2-配置-Qexo"><a href="#2-配置-Qexo" class="headerlink" title="2. 配置 Qexo"></a>2. 配置 Qexo</h3><p>如果你已按照上一篇文章部署了 Hexo 和 GitHub 仓库，以下是 Qexo 的推荐配置：</p><ul><li><strong>GitHub 密钥</strong>：<code>PERSONAL_TOKEN</code>（建议使用具有 repo 权限的 Token）</li><li><strong>GitHub 仓库</strong>：<code>用户名/hexo</code>（如：<code>osyb/hexo</code>）</li><li><strong>项目分支</strong>：<code>main</code></li><li><strong>博客路径</strong>：留空（默认根目录即可）</li></ul><p>配置界面如下所示：</p><p><img src="https://cdn.osyb.cn/img/2025/07/b28eaf7e06377570d37914fc7f11d463.png/blog" alt="Qexo 配置界面截图"></p><hr><h2 id="三、使用流程演示"><a href="#三、使用流程演示" class="headerlink" title="三、使用流程演示"></a>三、使用流程演示</h2><ol><li>打开 Qexo 后台，点击“新建文章”进行写作</li><li>保存后，文章自动写入 Hexo 的 <code>_posts</code> 目录</li><li>提交改动并推送至 GitHub 仓库</li><li>GitHub Actions 自动构建并部署到服务器，博客即可更新</li></ol><hr><h2 id="项目地址参考"><a href="#项目地址参考" class="headerlink" title="项目地址参考"></a>项目地址参考</h2><ul><li><a href="https://hexo.io/">Hexo 官网</a></li><li><a href="https://github.com/Qexo/Qexo">Qexo GitHub 仓库</a></li><li><a href="https://docs.github.com/en/actions">GitHub Actions 官方文档</a></li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过结合 Qexo 与 GitHub Actions，我们构建了一个高效、现代化的博客管理系统。从写作到发布无需借助本地终端，打开浏览器即可完成一切操作，极大地提升了 Hexo 博客的可用性与维护效率。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文介绍如何结合 Qexo 与 GitHub Actions，为 Hexo 博客打造图形化管理后台，实现免命令行的可视化写作与自动部署流程，适合希望简化博客运维的用户参考。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/categories/Hexo/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="GitHub Actions" scheme="https://blog.osyb.cn/tags/GitHub-Actions/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Actions 自动部署 Hexo 博客</title>
    <link href="https://blog.osyb.cn/posts/wz-13/"/>
    <id>https://blog.osyb.cn/posts/wz-13/</id>
    <published>2025-07-19T06:14:11.819Z</published>
    <updated>2025-07-26T10:08:29.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 是一个快速、简洁且高效的静态博客框架，适合技术类博客搭建。通过 GitHub Actions，我们可以实现代码提交后自动构建并部署博客，彻底告别手动部署，提升效率。</p><hr><h2 id="一、创建-GitHub-仓库"><a href="#一、创建-GitHub-仓库" class="headerlink" title="一、创建 GitHub 仓库"></a>一、创建 GitHub 仓库</h2><p>登录 <a href="https://github.com/">GitHub</a>，点击右上角的 <code>+</code>，选择 <a href="https://github.com/new">New repository</a>。</p><p><img src="https://cdn.osyb.cn/img/2025/07/4d685dec82a1424ba0e8f25b2b0abe03.png/blog" alt="新建仓库"></p><p>填写内容如下：</p><ul><li><strong>Repository name</strong>：自定义你的仓库名，例如 <code>hexo</code></li><li><strong>Visibility</strong>：选择 <code>Private</code>（私有）</li><li>其他选项保持默认，点击 <strong>Create repository</strong></li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/2f14cfa0c28a4ef4f5e12133b7b7809c.png/blog" alt="仓库信息"></p><hr><h2 id="二、初始化-Hexo-项目"><a href="#二、初始化-Hexo-项目" class="headerlink" title="二、初始化 Hexo 项目"></a>二、初始化 Hexo 项目</h2><p>打开命令行工具（CMD、终端或 PowerShell），执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 Hexo CLI 工具</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录下初始化 Hexo 项目，创建 blog 文件夹</span></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 blog 项目目录</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><blockquote><p>💡 如果你是 macOS 用户，也可以使用 Homebrew 安装 Hexo：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Homebrew安装Hexo </span></span><br><span class="line">brew install hexo  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录下初始化 Hexo 项目，创建 blog 文件夹 </span></span><br><span class="line">hexo init blog  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 blog 项目目录 </span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>初始化成功后，<code>blog</code> 文件夹结构如下：</p><p><img src="https://cdn.osyb.cn/img/2025/07/60991312c89f2609dc14755e74faa8d8.png/blog" alt="blog结构"></p><hr><h2 id="三、配置-GitHub-Token（权限）"><a href="#三、配置-GitHub-Token（权限）" class="headerlink" title="三、配置 GitHub Token（权限）"></a>三、配置 GitHub Token（权限）</h2><p>登录 GitHub，依次进入：</p><p><code>Settings</code> → <code>Developer Settings</code> → <code>Personal access tokens</code> → <code>Tokens (classic)</code>，点击 <a href="https://github.com/settings/tokens/new">Generate new token (classic)</a></p><p><img src="https://cdn.osyb.cn/img/2025/07/16c71d315666a533ba2561dc05981753.png/blog" alt="创建 token"></p><p>配置如下：</p><ul><li><strong>Note</strong>：如 <code>hexo-blog-token</code></li><li><strong>Expiration</strong>：选择 <code>No expiration</code></li><li><strong>Scopes</strong>：勾选 <code>repo</code> 和 <code>workflow</code></li></ul><blockquote><p><code>repo</code>：访问和推送仓库权限<br><code>workflow</code>：触发 GitHub Actions 工作流权限</p></blockquote><p><img src="https://cdn.osyb.cn/img/2025/07/50f05bef46911cc93fdb482946232dd4.png/blog" alt="token 权限"></p><p>生成后复制该 Token。</p><p>回到你的 Hexo 源码仓库，打开：<br><code>Settings</code> → <code>Secrets and variables</code> → <code>Actions </code><br>点击 <strong>New repository secret</strong>：</p><ul><li><strong>Name</strong>：<code>PERSONAL_TOKEN</code></li><li><strong>Secret</strong>：粘贴你刚复制的 Token</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/ef84d0272cc721b8630464522a92f6d6.png/blog" alt="New secret"></p><hr><h2 id="四、配置-GitHub-Actions-自动部署"><a href="#四、配置-GitHub-Actions-自动部署" class="headerlink" title="四、配置 GitHub Actions 自动部署"></a>四、配置 GitHub Actions 自动部署</h2><p>在 <code>blog</code> 目录下创建部署配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.github/workflows/deploy.yml</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub Actions 配置文件：用于自动部署 Hexo 博客</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 main 分支被 push 时触发部署流程</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="comment"># 使用最新版 Ubuntu 运行环境</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 允许对仓库内容进行写操作（git push）</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Step 1：检出仓库源码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 2：设置 Node.js 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 3：安装依赖</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 4：生成 Hexo 静态文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">Hexo</span> <span class="string">static</span> <span class="string">files</span> </span><br><span class="line">        <span class="attr">run:</span> <span class="string">npx</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Step 5：部署到 gh-pages 分支</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">personal_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PERSONAL_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">user_name:</span> <span class="string">用户名</span></span><br><span class="line">          <span class="attr">user_email:</span> <span class="string">邮箱</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、提交-Hexo-项目到-GitHub"><a href="#五、提交-Hexo-项目到-GitHub" class="headerlink" title="五、提交 Hexo 项目到 GitHub"></a>五、提交 Hexo 项目到 GitHub</h2><p>执行以下命令将 Hexo 源码推送到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保你在 blog 项目根目录</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Git 仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加全部文件</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建首次提交</span></span><br><span class="line">git commit -m <span class="string">&quot;首次提交 Hexo 博客源码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将默认分支改为 main</span></span><br><span class="line">git branch -M main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库地址（替换为你自己的仓库地址）</span></span><br><span class="line">git remote add origin https://github.com/yubanwo/test.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到 GitHub</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>成功后，刷新 GitHub 仓库页面，你将看到所有 Hexo 源码已经上传。</p><p><img src="https://cdn.osyb.cn/img/2025/07/28884a87ccee42747a5b6da9cfebc804.png/blog" alt="上传成功"></p><hr><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p>等待 GitHub Actions 执行完成之后，查看 <code>gh-pages</code> 分支发现已经生成文件了：</p><p><img src="https://cdn.osyb.cn/img/2025/07/f242a525291fb175ec7289b0da0bd551.png/blog" alt="gh-pages 分支"></p><p>未来每次更新博客，只需执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;更新博客内容&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>GitHub Actions 将自动重新构建并部署，无需你手动操作！</p><p>此外，你也可以通过 FTP、SFTP、WebDAV 等方式部署到服务器，实现自动上传。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本教程详细介绍了如何通过 GitHub Actions 自动部署 Hexo 静态博客，包括仓库创建、Hexo 初始化、Token 配置、工作流编写等步骤，帮助你实现博客一键构建与发布。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/categories/Hexo/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="GitHub Actions" scheme="https://blog.osyb.cn/tags/GitHub-Actions/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>随身 WiFi 通过 USB 接入 OpenWrt 路由器共享网络却不能访问 IPv6 网站的解决方法（中继版）</title>
    <link href="https://blog.osyb.cn/posts/wz-12/"/>
    <id>https://blog.osyb.cn/posts/wz-12/</id>
    <published>2025-07-18T08:40:16.959Z</published>
    <updated>2025-07-26T10:09:31.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章中，我写了通过 <code>NAT6</code> 模式让 OpenWrt 路由器共享 IPv6 网络的方法（<a href="https://blog.osyb.cn/posts/wz-4/">传送门</a>）。但 NAT6 实际上并不是真正意义上的 IPv6 原生支持，属于 “折中方案”。</p><p>本文将讲解另一种更优雅的方式 —— <strong>IPv6 中继模式</strong>。这种方式能让你的设备获得真实的 IPv6 地址并直接与外部通信，前提是上游网络已经分配了 IPv6 前缀。</p><blockquote><p>场景举例：你用一个随身 WiFi（如 USB 网卡）插在 OpenWrt 路由器上，并成功通过该网卡连接了上游网络（比如校园网或 5G 网络），此时虽然 <code>wan6</code> 接口能获取到 IPv6 地址，但 LAN 口下的设备却无法访问 IPv6 网站。这就是中继模式要解决的问题。</p></blockquote><hr><h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>IPv6 中继模式（relay）并不会像 DHCPv4 一样发放地址，而是通过 RA（路由通告）、DHCPv6、NDP 等协议从上游接口“继承”配置，并传递给下游 LAN 设备。</p><p>适用于以下场景：</p><ul><li>OpenWrt 获取了上游提供的 IPv6 地址，但不会分配前缀（比如某些移动热点）</li><li>OpenWrt 作为透明网关，既不分配 IPv6 前缀，也不进行 NAT，仅作为中继</li></ul><hr><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="第一步：配置-usbwan6-接口（上游）"><a href="#第一步：配置-usbwan6-接口（上游）" class="headerlink" title="第一步：配置 usbwan6 接口（上游）"></a>第一步：配置 <code>usbwan6</code> 接口（上游）</h3><p>进入 OpenWrt Web 管理后台：</p><ul><li><p><code>网络</code> → <code>接口</code> → 选择 <code>usbwan6</code> → <code>编辑</code></p></li><li><p>切换到 <code>DHCP 服务器</code> → <code>IPv6 设置</code> 页面</p><ul><li>启用 <strong>指定的主接口</strong></li><li>RA 服务：<strong>中继模式</strong></li><li>DHCPv6 服务：<strong>中继模式</strong></li><li>NDP 代理：<strong>中继模式</strong></li><li>开启 <strong>学习路由</strong></li></ul></li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/9b590b625f2ef2ae609d4b5fa84183e8.png/blog" alt="配置 usbwan6 接口"></p><hr><h3 id="第二步：配置-lan-接口（下游）"><a href="#第二步：配置-lan-接口（下游）" class="headerlink" title="第二步：配置 lan 接口（下游）"></a>第二步：配置 <code>lan</code> 接口（下游）</h3><ul><li><p><code>网络</code> → <code>接口</code> → 选择 <code>lan</code> → <code>编辑</code></p></li><li><p>切换到 <code>DHCP 服务器</code> → <code>IPv6 设置</code> 页面</p><ul><li>RA 服务：<strong>中继模式</strong></li><li>DHCPv6 服务：<strong>中继模式</strong></li><li>NDP 代理：<strong>中继模式</strong></li><li>开启 <strong>学习路由</strong></li></ul></li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/4a74b157e81f82bb5755c83fb1cc4953.png/blog" alt="配置 lan 接口"></p><hr><h2 id="验证-IPv6-网络是否生效"><a href="#验证-IPv6-网络是否生效" class="headerlink" title="验证 IPv6 网络是否生效"></a>验证 IPv6 网络是否生效</h2><p>完成上述设置后，重启一次路由器。</p><p>然后你可以在终端运行以下命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping6 ipv6.google.com</span><br></pre></td></tr></table></figure><p>或者使用 <a href="https://test-ipv6.com/">https://test-ipv6.com</a> 检查你的设备是否已支持 IPv6。</p><hr><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p><strong>USB网卡无法获取IPv6地址？</strong></p><ul><li>请确认上游网络是否支持 IPv6 分配，部分运营商网络默认只提供 IPv4。</li></ul><p><strong>LAN 口设备获取了 IPv6 地址却无法访问外网？</strong></p><ul><li>请确认防火墙允许 IPv6 转发。</li><li>检查是否启用了 <code>学习路由</code> 功能（relay 模式依赖）。</li></ul><p><strong>使用的是热点网络（如手机共享）？</strong></p><ul><li>手机热点往往不会转发 IPv6，只能使用 NAT6。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>相比 NAT6 模式，IPv6 中继更贴近原生支持，延迟低、稳定性好，适合已经具备上游 IPv6 网络环境的用户。</p><hr><blockquote><p>📝 延伸阅读：<a href="https://blog.osyb.cn/posts/wz-4/">IPv6 NAT6 配置教程</a></p></blockquote><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用，请勿用于任何非法用途。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文介绍如何在 OpenWrt 上通过 IPv6 中继模式实现 LAN 设备原生 IPv6 访问，适用于 USB 网卡等获取上游 IPv6 地址但无法分配前缀的场景，是 NAT6 的优雅替代方案。</summary>
    
    
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/categories/OpenWrt/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="OpenWrt " scheme="https://blog.osyb.cn/tags/OpenWrt/"/>
    
    <category term="随身WiFi" scheme="https://blog.osyb.cn/tags/%E9%9A%8F%E8%BA%ABWiFi/"/>
    
    <category term="5G 通信壳" scheme="https://blog.osyb.cn/tags/5G-%E9%80%9A%E4%BF%A1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Git 日常开发必备命令大全</title>
    <link href="https://blog.osyb.cn/posts/wz-11/"/>
    <id>https://blog.osyb.cn/posts/wz-11/</id>
    <published>2025-07-15T07:45:07.219Z</published>
    <updated>2025-07-29T22:25:49.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git 是一个开源的分布式版本控制系统，常用于代码版本管理和团队协作开发。本文将介绍一些日常开发中最常用的 Git 指令，帮助你快速上手和查阅。</p><h2 id="一、Git-基本配置"><a href="#一、Git-基本配置" class="headerlink" title="一、Git 基本配置"></a>一、Git 基本配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><hr><h2 id="二、项目初始化与克隆"><a href="#二、项目初始化与克隆" class="headerlink" title="二、项目初始化与克隆"></a>二、项目初始化与克隆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个本地仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/项目名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆并指定目录名</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/项目名.git myproject</span><br></pre></td></tr></table></figure><hr><h2 id="三、常用工作流命令"><a href="#三、常用工作流命令" class="headerlink" title="三、常用工作流命令"></a>三、常用工作流命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前仓库状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区（stage）</span></span><br><span class="line">git add 文件名         <span class="comment"># 添加单个文件</span></span><br><span class="line">git add .             <span class="comment"># 添加当前目录下所有更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交代码到本地仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加并提交（快捷命令）</span></span><br><span class="line">git commit -am <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简洁日志查看</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示最近一次提交的改动内容</span></span><br><span class="line">git show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销修改（回退未提交的修改）</span></span><br><span class="line">git checkout -- 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区文件（从暂存区移除）</span></span><br><span class="line">git reset HEAD 文件名</span><br></pre></td></tr></table></figure><hr><h2 id="四、分支操作"><a href="#四、分支操作" class="headerlink" title="四、分支操作"></a>四、分支操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支列表</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支</span></span><br><span class="line">git branch 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换新分支</span></span><br><span class="line">git checkout -b 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支到当前分支</span></span><br><span class="line">git merge 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决冲突后添加并提交</span></span><br><span class="line">git add 冲突文件</span><br><span class="line">git commit -m <span class="string">&quot;解决冲突&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、远程操作"><a href="#五、远程操作" class="headerlink" title="五、远程操作"></a>五、远程操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add origin 仓库地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库（首次）</span></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送当前分支</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程仓库最新代码</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取远程分支信息但不合并</span></span><br><span class="line">git fetch</span><br></pre></td></tr></table></figure><hr><h2 id="六、标签操作"><a href="#六、标签操作" class="headerlink" title="六、标签操作"></a>六、标签操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">git tag v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带注释的标签</span></span><br><span class="line">git tag -a v1.0 -m <span class="string">&quot;版本说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送标签到远程</span></span><br><span class="line">git push origin v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地标签</span></span><br><span class="line">git tag -d v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程标签</span></span><br><span class="line">git push origin :refs/tags/v1.0</span><br></pre></td></tr></table></figure><h2 id="七、撤销与恢复操作"><a href="#七、撤销与恢复操作" class="headerlink" title="七、撤销与恢复操作"></a>七、撤销与恢复操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退到上一个提交（保留改动）</span></span><br><span class="line">git reset --soft HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退到上一个提交（删除改动）</span></span><br><span class="line">git reset --hard HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 丢弃工作区和暂存区的所有改动</span></span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某次提交的修改内容</span></span><br><span class="line">git diff 提交ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销 commit（如需修改提交信息）</span></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><hr><h2 id="八、忽略文件配置（-gitignore）"><a href="#八、忽略文件配置（-gitignore）" class="headerlink" title="八、忽略文件配置（.gitignore）"></a>八、忽略文件配置（.gitignore）</h2><p>创建 <code>.gitignore</code> 文件以指定 Git 忽略哪些文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略 node_modules 目录</span></span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略所有 .log 文件</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略本地配置文件</span></span><br><span class="line">.env.local</span><br></pre></td></tr></table></figure><hr><h2 id="九、常见问题解决"><a href="#九、常见问题解决" class="headerlink" title="九、常见问题解决"></a>九、常见问题解决</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fatal: refusing to merge unrelated histories</span></span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改上一次提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;新的提交信息&quot;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文整理了开发中最常用的 Git 命令，包括配置、初始化、提交、分支、远程操作、标签、回退恢复、.gitignore 规则等，适合作为 Git 入门教程和日常速查手册。</summary>
    
    
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="记录" scheme="https://blog.osyb.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>712会员节｜免费领取14天QQ超级会员</title>
    <link href="https://blog.osyb.cn/posts/wz-10/"/>
    <id>https://blog.osyb.cn/posts/wz-10/</id>
    <published>2025-07-14T17:29:54.804Z</published>
    <updated>2025-07-26T10:11:38.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🎉-活动简介"><a href="#🎉-活动简介" class="headerlink" title="🎉 活动简介"></a>🎉 活动简介</h2><p>腾讯推出的 <strong>「712会员节·每面皆闪耀」</strong> 活动现已开启，参与即可 <strong>免费领取 14 天 QQ 超级会员</strong>，还有其他多项任务奖励等你来解锁！</p><p>本次活动不仅福利满满，而且操作简单，完成任务即可获得奖励，人人可领！</p><hr><h2 id="🗓-活动时间"><a href="#🗓-活动时间" class="headerlink" title="🗓 活动时间"></a>🗓 活动时间</h2><p><strong>2025年7月11日 11:00:00 ～ 2025年8月12日 23:59:59</strong></p><p>请在活动截止前完成任务并领取奖励，逾期将无法领取。</p><hr><h2 id="🎁-活动奖励"><a href="#🎁-活动奖励" class="headerlink" title="🎁 活动奖励"></a>🎁 活动奖励</h2><ul><li>✅ 必得奖励：<strong>14天 QQ 超级会员</strong></li><li>🎯 其他奖励：完成任务过程中的额外惊喜（具体以页面为准）</li></ul><hr><h2 id="🚪-活动入口"><a href="#🚪-活动入口" class="headerlink" title="🚪 活动入口"></a>🚪 活动入口</h2><ul><li><p>🔗 活动链接：<a href="https://club.vip.qq.com/transfer?kuikly=vas_vip_fest_2025&from=ark_invite&invite_code=5aef3b28-0d24-430a-8c58-2929e51ea81b">点击前往活动页面</a></p></li><li><p>📱 扫码参与：</p><p><img src="https://cdn.osyb.cn/img/2025/07/f4ac5743e3e595cf202a606404a790f1.png/blog" alt="扫码进入活动"></p></li></ul><hr><h2 id="📝-参与流程"><a href="#📝-参与流程" class="headerlink" title="📝 参与流程"></a>📝 参与流程</h2><p>只需按照下列步骤操作，完成 8 个任务点亮进度条即可领取超级会员。</p><ol><li>使用手机QQ打开链接或扫描二维码</li><li>按提示完成任务</li><li>点亮任务进度至 <strong>8&#x2F;8</strong></li><li>点击「立即领取」按钮</li><li>完成全部任务，即可成功领取 <strong>14天超级会员</strong></li></ol><p>任务示意图如下：</p><p><img src="https://cdn.osyb.cn/img/2025/07/df32f207e65189100a7873ecaeb3cce0.jpeg/blog" alt="任务进度示意图"></p><p>成功领取奖励示意图：</p><p><img src="https://cdn.osyb.cn/img/2025/07/40077013d73f3c0654cbc13b2aa59352.jpg/blog" alt="领取成功示意图"></p><hr><h2 id="💡-温馨提示"><a href="#💡-温馨提示" class="headerlink" title="💡 温馨提示"></a>💡 温馨提示</h2><ul><li>每个 QQ 号限领取一次，请使用常用账号参与。</li><li>建议使用最新版 QQ 或浏览器打开活动页面，避免加载异常。</li><li>若出现无法领取的问题，请刷新页面或稍后重试。</li></ul><hr><p>📢 <strong>别错过这次白嫖福利，抓紧时间参加吧！分享给朋友，一起拿会员～</strong></p>]]></content>
    
    
    <summary type="html">参与腾讯 712会员节「每面皆闪耀」活动，即可免费领取14天 QQ超级会员。完成任务即可领取，操作简单，人人可得，活动时间截至2025年8月12日，千万别错过！</summary>
    
    
    
    <category term="活动资讯" scheme="https://blog.osyb.cn/categories/%E6%B4%BB%E5%8A%A8%E8%B5%84%E8%AE%AF/"/>
    
    
    <category term="活动资讯" scheme="https://blog.osyb.cn/tags/%E6%B4%BB%E5%8A%A8%E8%B5%84%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>Windows 浏览器提示未连接到互联网？可能是代理设置没关掉</title>
    <link href="https://blog.osyb.cn/posts/wz-9/"/>
    <id>https://blog.osyb.cn/posts/wz-9/</id>
    <published>2025-07-14T07:08:22.588Z</published>
    <updated>2025-07-26T10:12:51.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用网络加速器或机场服务（如 Clash、V2Ray、Trojan 等）之后，很多用户在<strong>重启电脑后首次打开浏览器时</strong>，会遇到以下提示：</p><blockquote><p><strong>“未连接到互联网，代理服务器出现问题，或者地址有误。”</strong></p></blockquote><p>这个问题多数情况下是因为<strong>系统代理设置没有恢复为默认状态</strong>，导致浏览器或其他程序仍然尝试通过已经关闭的代理服务器连接网络，最终连接失败。</p><p><img src="https://cdn.osyb.cn/img/2025/07/bec26f1992c236a32a7d06914dacb3a3.png/blog"></p><hr><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><h3 id="浏览器错误提示（可能是以下几种）："><a href="#浏览器错误提示（可能是以下几种）：" class="headerlink" title="浏览器错误提示（可能是以下几种）："></a>浏览器错误提示（可能是以下几种）：</h3><ul><li>无法访问此网站</li><li>请检查您的互联网连接</li><li>代理服务器出现问题，或者地址有误</li><li>ERR_PROXY_CONNECTION_FAILED</li></ul><p>这些报错大多数都与系统中的<strong>HTTP&#x2F;HTTPS代理配置</strong>残留有关。</p><hr><h2 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h2><ol><li><strong>加速器未正常关闭代理设置</strong><br>一些加速器&#x2F;机场客户端关闭后不会自动清除或还原系统代理设置。</li><li><strong>开机启动项设置残留</strong><br>加速器设置了系统代理，但并未随系统启动，导致代理地址无效。</li><li><strong>断电或系统崩溃后配置未恢复</strong><br>突然关机或程序异常退出，系统代理配置未能被及时重置。</li></ol><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法一：手动关闭系统代理"><a href="#方法一：手动关闭系统代理" class="headerlink" title="方法一：手动关闭系统代理"></a>方法一：手动关闭系统代理</h3><ol><li><p><strong>打开系统设置</strong><br>点击开始菜单 → 设置（Settings）</p></li><li><p><strong>进入网络设置</strong><br>依次点击：<br><code>网络和 Internet</code> → <code>代理</code></p></li><li><p><strong>关闭代理服务器</strong><br>在<strong>手动代理设置</strong>中，将“<strong>使用代理服务器</strong>”的开关关闭。</p><p><img src="https://cdn.osyb.cn/img/2025/07/6bb313c97705e5d4d07cf22610339095.png/blog"></p></li><li><p>关闭设置页面，重新打开浏览器测试是否恢复正常。</p></li></ol><hr><h3 id="方法二：使用命令行重置代理配置"><a href="#方法二：使用命令行重置代理配置" class="headerlink" title="方法二：使用命令行重置代理配置"></a>方法二：使用命令行重置代理配置</h3><p>如果你希望更快速地通过命令行解决，可以按下 <code>Win + R</code> 打开运行框，输入 <code>cmd</code>，以管理员身份运行命令提示符，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp reset proxy</span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/07/3dd6dfeb8f218a21f22c22c07a554188.png/blog"></p><p>此命令会重置 <code>WinHTTP</code> 代理配置（不是浏览器代理，但部分系统级别应用依赖）。</p><hr><h3 id="方法三：使用-PowerShell-清除代理设置"><a href="#方法三：使用-PowerShell-清除代理设置" class="headerlink" title="方法三：使用 PowerShell 清除代理设置"></a>方法三：使用 PowerShell 清除代理设置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings&#x27;</span> <span class="literal">-Name</span> ProxyEnable <span class="literal">-Value</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/07/2f089a6ead497b27a19067acea8f26ce.png/blog"></p><hr><h2 id="如何避免此问题再次发生？"><a href="#如何避免此问题再次发生？" class="headerlink" title="如何避免此问题再次发生？"></a>如何避免此问题再次发生？</h2><ol><li><strong>使用自带代理还原功能的加速器</strong><br>优先选择能自动恢复代理设置的客户端，例如 Clash for Windows、V2RayN 等的“退出时关闭代理”选项。</li><li><strong>不要直接结束进程</strong><br>避免在任务管理器中直接结束加速器进程，否则可能留下代理设置。</li><li><strong>定期检查代理设置</strong><br>特别是在网络连接异常时，第一时间检查 <code>设置 → 网络和 Internet → 代理</code>。</li><li><strong>设置启动脚本自动还原</strong>（进阶用户可选）<br>使用批处理脚本或 PowerShell 每次开机自动重置系统代理设置。</li></ol><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>使用加速器的同时，注意代理配置的管理可以避免很多不必要的网络连接问题。如果你经常遇到这种问题，不妨将这篇文章收藏起来，作为应急解决方案参考。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">使用 Clash、V2Ray、Trojan 等网络加速器后，浏览器提示“代理服务器出现问题”？本文详解 ERR_PROXY_CONNECTION_FAILED 报错原因，并提供 3 种方法手动或命令行清除系统代理设置，帮助你恢复正常上网。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Windows" scheme="https://blog.osyb.cn/categories/Windows/"/>
    
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Windows" scheme="https://blog.osyb.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Debian 中使用 Bind Mount 实现目录挂载</title>
    <link href="https://blog.osyb.cn/posts/wz-8/"/>
    <id>https://blog.osyb.cn/posts/wz-8/</id>
    <published>2025-07-14T03:12:26.185Z</published>
    <updated>2025-07-26T10:13:59.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常运维或开发环境中，我们可能希望将一个目录的内容映射到系统中的另一个位置。例如，将某个软件的数据目录挂载到一个新的路径，或者在容器环境中实现目录隔离。这时候就可以使用 Linux 的 bind mount 功能来实现。本文将介绍如何在 Debian 系统中实现这一操作。</p><hr><h2 id="一、什么是-Bind-Mount？"><a href="#一、什么是-Bind-Mount？" class="headerlink" title="一、什么是 Bind Mount？"></a>一、什么是 Bind Mount？</h2><p>Bind mount（绑定挂载）是 Linux 提供的一种特殊挂载方式，它可以让一个已有的目录在另一个路径下“出现”。不同于挂载硬盘设备，bind mount 是将已有目录绑定到另一个目录，不涉及文件系统的改变。</p><hr><h2 id="二、使用-bind-mount-的基本语法"><a href="#二、使用-bind-mount-的基本语法" class="headerlink" title="二、使用 bind mount 的基本语法"></a>二、使用 bind mount 的基本语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount --<span class="built_in">bind</span> &lt;原始目录&gt; &lt;目标目录&gt;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设你想将 <code>/var/www/project/data</code> 绑定挂载到 <code>/home/user/data_link</code>，可以执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /home/user/data_link</span><br><span class="line"><span class="built_in">sudo</span> mount --<span class="built_in">bind</span> /var/www/project/data /home/user/data_link</span><br></pre></td></tr></table></figure><p>执行后，你就可以通过 <code>/home/user/data_link</code> 访问 <code>/var/www/project/data</code> 的内容了。</p><hr><h2 id="三、查看挂载结果"><a href="#三、查看挂载结果" class="headerlink" title="三、查看挂载结果"></a>三、查看挂载结果</h2><p>你可以使用 <code>mount</code> 命令或 <code>findmnt</code> 查看是否挂载成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount | grep data_link</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findmnt /home/user/data_link</span><br></pre></td></tr></table></figure><hr><h2 id="四、如何实现开机自动挂载"><a href="#四、如何实现开机自动挂载" class="headerlink" title="四、如何实现开机自动挂载"></a>四、如何实现开机自动挂载</h2><p>临时挂载在系统重启后会失效。如果你希望系统启动后自动进行绑定挂载，需要将信息写入 <code>/etc/fstab</code> 文件。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>编辑 <code>/etc/fstab</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/fstab</span><br></pre></td></tr></table></figure><ol start="2"><li>添加如下内容：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/project/data  /home/user/data_link  none  bind  0  0</span><br></pre></td></tr></table></figure><ol start="3"><li>保存并运行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -a</span><br></pre></td></tr></table></figure><p>如果没有报错，说明配置正确。</p><hr><h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><ul><li>目标目录必须存在，否则挂载命令会失败。</li><li>如果源目录或目标目录涉及权限或 SELinux，需要确保访问策略正确。</li><li>bind mount 只是路径的“映射”，删除目标目录不会删除原目录中的数据。</li></ul><hr><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p>bind mount 是一个简单高效的方式，用于将一个目录挂载到另一个目录，在开发部署、数据重定向等场景中非常实用。通过 <code>mount --bind</code> 命令和 <code>/etc/fstab</code> 配置，你可以灵活地管理你的目录结构。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文介绍如何在 Debian 系统中使用 mount --bind 命令实现目录绑定挂载，包括基本语法、示例用法、查看挂载情况及如何通过 /etc/fstab 设置开机自动挂载，适用于开发和运维场景中的目录重定向需求。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Linux" scheme="https://blog.osyb.cn/categories/Linux/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Debian" scheme="https://blog.osyb.cn/tags/Debian/"/>
    
    <category term="Linux" scheme="https://blog.osyb.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Debian 创建一个纯 SFTP 用户环境</title>
    <link href="https://blog.osyb.cn/posts/wz-7/"/>
    <id>https://blog.osyb.cn/posts/wz-7/</id>
    <published>2025-07-11T19:06:49.942Z</published>
    <updated>2025-07-26T10:15:12.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在某些场景下，我们希望给某些用户提供 <strong>SFTP 文件上传&#x2F;下载权限</strong>，而不允许他们使用 SSH 登录系统。本文将介绍如何在 <strong>Debian 系统</strong>上创建一个<strong>纯 SFTP 用户环境</strong>，只允许使用 SFTP，禁止 SSH shell 访问。</p><hr><h2 id="一、前提条件"><a href="#一、前提条件" class="headerlink" title="一、前提条件"></a>一、前提条件</h2><ul><li>已安装并启用了 OpenSSH 服务。</li><li>拥有一台 Debian 服务器的 root 权限或 sudo 权限。</li></ul><hr><h2 id="二、创建-SFTP-用户组和用户"><a href="#二、创建-SFTP-用户组和用户" class="headerlink" title="二、创建 SFTP 用户组和用户"></a>二、创建 SFTP 用户组和用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 SFTP 用户组</span></span><br><span class="line"><span class="built_in">sudo</span> groupadd sftpusers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个用户，仅允许使用 SFTP，禁用 shell</span></span><br><span class="line"><span class="built_in">sudo</span> useradd -m -d /home/sftpuser -s /usr/sbin/nologin -g sftpusers sftpuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码（用于 SFTP 登录）</span></span><br><span class="line"><span class="built_in">sudo</span> passwd sftpuser</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个用户，仅允许使用 SFTP，禁用 shell</span></span><br><span class="line"><span class="built_in">sudo</span> adduser --shell /usr/sbin/nologin --no-create-home sftpuser</span><br></pre></td></tr></table></figure><p>如果你只是为了创建账号，不需要填写这些信息，直接按回车（Enter）跳过即可，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Full Name []:        ← 直接按回车</span><br><span class="line">Room Number []:      ← 再按回车</span><br><span class="line">Work Phone []:       ← 再按回车</span><br><span class="line">...</span><br><span class="line">Is the information correct? [Y/n]</span><br></pre></td></tr></table></figure><p>输入 Y 或直接回车就完成了。</p><hr><h2 id="三、配置用户目录权限"><a href="#三、配置用户目录权限" class="headerlink" title="三、配置用户目录权限"></a>三、配置用户目录权限</h2><p>OpenSSH 要求 SFTP 的根目录不能被用户写入，因此需要设置一个只读根目录，并在其下创建一个可写子目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置根目录权限（必须是 root 拥有）</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> root:root /home/sftpuser</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 755 /home/sftpuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建上传目录并赋予用户权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /home/sftpuser/uploads</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> sftpuser:sftpusers /home/sftpuser/uploads</span><br></pre></td></tr></table></figure><hr><h2 id="四、配置-OpenSSH-的-SFTP-限制"><a href="#四、配置-OpenSSH-的-SFTP-限制" class="headerlink" title="四、配置 OpenSSH 的 SFTP 限制"></a>四、配置 OpenSSH 的 SFTP 限制</h2><p>编辑 SSH 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>在文件末尾添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Match Group sftpusers</span><br><span class="line">    ChrootDirectory %h</span><br><span class="line">    ForceCommand internal-sftp</span><br><span class="line">    X11Forwarding no</span><br><span class="line">    AllowTcpForwarding no</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>ChrootDirectory %h</code>：将用户限制在自己的主目录。</li><li><code>ForceCommand internal-sftp</code>：强制使用 SFTP。</li><li>禁用端口转发和 X11 转发以增强安全性。</li></ul><hr><h2 id="五、重启-SSH-服务"><a href="#五、重启-SSH-服务" class="headerlink" title="五、重启 SSH 服务"></a>五、重启 SSH 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart ssh</span><br></pre></td></tr></table></figure><hr><h2 id="六、安全建议"><a href="#六、安全建议" class="headerlink" title="六、安全建议"></a>六、安全建议</h2><ul><li>每个用户独立目录 <code>/home/用户名/uploads</code>。</li><li>建议结合 fail2ban 或防火墙防止暴力破解。</li><li>可进一步使用证书认证替代密码。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过以上步骤，我们成功在 Debian 系统中创建了一个安全、隔离、无法登录 Shell 的 SFTP 用户环境，适合用于文件托管、自动上传等场景。相比直接开放 SSH，这种方式不仅更安全，还能精细控制用户权限。<br>在实际使用中，建议定期审查 SFTP 用户权限、访问日志，并结合防火墙和审计工具提升系统整体安全性。</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文详解如何在 Debian 系统中配置只允许使用 SFTP 的用户环境，禁止 SSH Shell 登录，适用于搭建安全隔离的文件上传服务，包括用户权限配置、目录隔离、OpenSSH 限制等关键操作。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Linux" scheme="https://blog.osyb.cn/categories/Linux/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Debian" scheme="https://blog.osyb.cn/tags/Debian/"/>
    
    <category term="Linux" scheme="https://blog.osyb.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>让 OpenWrt 支持 USB 网络共享</title>
    <link href="https://blog.osyb.cn/posts/wz-6/"/>
    <id>https://blog.osyb.cn/posts/wz-6/</id>
    <published>2025-07-10T14:51:59.569Z</published>
    <updated>2025-07-26T10:16:28.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方的 OpenWrt 固件是不带 USB 网络共享功能的，还需要手动安装相关模块。</p><hr><h2 id="一、RNDIS模式（推荐）"><a href="#一、RNDIS模式（推荐）" class="headerlink" title="一、RNDIS模式（推荐）"></a>一、RNDIS模式（推荐）</h2><p>RNDIS（Remote Network Driver Interface Specification）是微软开发的网络设备通讯协议，兼容性极高，广泛支持 Windows、Linux、OpenWrt 等系统。</p><p><strong>优点：</strong></p><ul><li>支持广泛，尤其是 Windows 系统；</li><li>OpenWrt 路由器只需两个模块即可启用；</li><li>稳定性较好。</li></ul><p><strong>缺点：</strong></p><ul><li>在部分 Linux 系统中表现一般，吞吐率略低。</li></ul><h3 id="1-面板安装"><a href="#1-面板安装" class="headerlink" title="1. 面板安装"></a>1. 面板安装</h3><p>在OpenWrt系统的 Web 面板中，进入 <strong>系统 &gt; 软件包</strong>，搜索并安装以下模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kmod-usb-net</span><br><span class="line">kmod-usb-net-rndis</span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/07/d4e115184f78dba4573fbf9494bb309a.png/blog" alt="OpenWrt 面板安装模块"></p><h3 id="2-SSH安装"><a href="#2-SSH安装" class="headerlink" title="2. SSH安装"></a>2. SSH安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install kmod-usb-net kmod-usb-net-rndis</span><br></pre></td></tr></table></figure><hr><h2 id="二、CDC-ECM模式（适用于Linux）"><a href="#二、CDC-ECM模式（适用于Linux）" class="headerlink" title="二、CDC-ECM模式（适用于Linux）"></a>二、CDC-ECM模式（适用于Linux）</h2><p>CDC-ECM（Ethernet Control Model）是 USB 通信类中的一种标准协议，主要为以太网数据通信而设计。</p><p><strong>优点：</strong></p><ul><li>Linux 和 OpenWrt 默认原生支持，无需额外驱动；</li><li>协议规范、实现简洁；</li><li>稳定性好，适合嵌入式设备。</li></ul><p><strong>缺点：</strong></p><ul><li>不支持 Windows 系统（需要手动安装驱动或修改 INF 文件）；</li><li>吞吐率一般。</li></ul><h3 id="1-面板安装-1"><a href="#1-面板安装-1" class="headerlink" title="1. 面板安装"></a>1. 面板安装</h3><p>安装以下模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kmod-usb-net  </span><br><span class="line">kmod-usb-net-cdc-eem</span><br></pre></td></tr></table></figure><h3 id="2-SSH安装-1"><a href="#2-SSH安装-1" class="headerlink" title="2. SSH安装"></a>2. SSH安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install kmod-usb-net kmod-usb-net-cdc-eem</span><br></pre></td></tr></table></figure><hr><h2 id="三、CDC-NCM模式（高性能模式）"><a href="#三、CDC-NCM模式（高性能模式）" class="headerlink" title="三、CDC-NCM模式（高性能模式）"></a>三、CDC-NCM模式（高性能模式）</h2><p>CDC-NCM（Network Control Model）是 CDC-ECM 的增强版本，提供更高的数据吞吐能力，适合需要更高网络性能的应用场景，如 4G&#x2F;5G 上网卡等。</p><p><strong>优点：</strong></p><ul><li>吞吐率高、数据效率优；</li><li>在 Linux 和 OpenWrt 下支持良好；</li><li>适合高速网络连接设备。</li></ul><p><strong>缺点：</strong></p><ul><li>Windows 支持不佳；</li><li>相比 ECM 配置稍复杂；</li><li>部分设备兼容性较差。</li></ul><h3 id="1-面板安装-2"><a href="#1-面板安装-2" class="headerlink" title="1. 面板安装"></a>1. 面板安装</h3><p>安装以下模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kmod-usb-net  </span><br><span class="line">kmod-usb-net-cdc-ncm</span><br></pre></td></tr></table></figure><h3 id="2-SSH安装-2"><a href="#2-SSH安装-2" class="headerlink" title="2. SSH安装"></a>2. SSH安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install kmod-usb-net kmod-usb-net-cdc-ncm</span><br></pre></td></tr></table></figure><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>确保 OpenWrt 已经安装了以下核心模块：</p><ul><li><code>kmod-usb-core</code></li><li><code>kmod-usb2</code> 或 <code>kmod-usb3</code>（根据你设备的 USB 接口类型选择）</li></ul><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文介绍如何在 OpenWrt 系统中安装并启用 USB 网络共享功能，详细说明了 RNDIS、CDC-ECM 及 CDC-NCM 三种主流模式的安装方法及优缺点，帮助用户根据需求选择合适的驱动模块，实现高效稳定的网络共享。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/categories/OpenWrt/"/>
    
    
    <category term="5G 通信壳" scheme="https://blog.osyb.cn/tags/5G-%E9%80%9A%E4%BF%A1%E5%A3%B3/"/>
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>小米 R3G 路由器刷 Breed</title>
    <link href="https://blog.osyb.cn/posts/wz-5/"/>
    <id>https://blog.osyb.cn/posts/wz-5/</id>
    <published>2025-06-28T10:33:42.070Z</published>
    <updated>2025-07-26T10:17:26.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天入手了一个华为的 5G 通信壳，为了更方便地使用，特意购买了一台带有 USB 3.0 接口的小米 R3G 路由器。由于其原厂系统不支持 USB 网络共享功能，因此考虑刷入 OpenWrt 系统，首先需刷入 Breed 启动引导。</p><hr><h2 id="一、准备工作与开启-SSH"><a href="#一、准备工作与开启-SSH" class="headerlink" title="一、准备工作与开启 SSH"></a>一、准备工作与开启 SSH</h2><h3 id="1-刷入稳定版官方固件"><a href="#1-刷入稳定版官方固件" class="headerlink" title="1. 刷入稳定版官方固件"></a>1. 刷入稳定版官方固件</h3><ul><li>固件文件：<a href="https://bigota.miwifi.com/xiaoqiang/rom/r3g/miwifi_r3g_firmware_12f97_2.25.124.bin">miwifi_r3g_firmware_9be74_2.28.44.bin</a></li><li>固件版本：2.28.44</li></ul><h3 id="2-刷入开发版官方固件"><a href="#2-刷入开发版官方固件" class="headerlink" title="2. 刷入开发版官方固件"></a>2. 刷入开发版官方固件</h3><ul><li>固件文件：<a href="https://bigota.miwifi.com/xiaoqiang/rom/r3g/miwifi_r3g_firmware_12f97_2.25.124.bin">miwifi_r3g_firmware_12f97_2.25.124.bin</a></li><li>固件版本：2.25.124</li></ul><h3 id="3-绑定设备与申请-SSH-权限"><a href="#3-绑定设备与申请-SSH-权限" class="headerlink" title="3. 绑定设备与申请 SSH 权限"></a>3. 绑定设备与申请 SSH 权限</h3><p>通过下载并安装“小米路由器 APP”，登录你的小米账号并绑定设备。<br>绑定完成后，前往 <a href="https://d.miwifi.com/rom/ssh">小米开放平台</a> 申请 SSH 权限，并下载 SSH 工具包 <code>miwifi_ssh.bin</code>。</p><h3 id="4-写入-SSH-工具包"><a href="#4-写入-SSH-工具包" class="headerlink" title="4. 写入 SSH 工具包"></a>4. 写入 SSH 工具包</h3><ol><li>确保 U 盘格式为 FAT 或 FAT32。</li><li>将 <code>miwifi_ssh.bin</code> 文件放置于 U 盘根目录。</li><li>断开路由器电源，插入 U 盘，按住 Reset 按钮并接通电源。</li><li>指示灯变为黄色闪烁后松开按钮，等待自动重启。</li></ol><p>此时，SSH 权限应已成功写入。</p><hr><h2 id="二、刷入-Breed-启动引导"><a href="#二、刷入-Breed-启动引导" class="headerlink" title="二、刷入 Breed 启动引导"></a>二、刷入 Breed 启动引导</h2><h3 id="1-准备-Breed-文件"><a href="#1-准备-Breed-文件" class="headerlink" title="1. 准备 Breed 文件"></a>1. 准备 Breed 文件</h3><ul><li>官方网站：<a href="https://breed.hackpascal.net/">https://breed.hackpascal.net/</a></li><li>固件下载：<a href="https://breed.hackpascal.net/breed-mt7621-xiaomi-r3g.bin">breed-mt7621-xiaomi-r3g.bin</a></li></ul><h4 id="文件放置方式："><a href="#文件放置方式：" class="headerlink" title="文件放置方式："></a>文件放置方式：</h4><ul><li>拔出 U 盘，在其根目录新建名为 <code>Breed</code> 的文件夹。</li><li>将下载好的 <code>breed-mt7621-xiaomi-r3g.bin</code> 文件放入其中。</li><li>再次将 U 盘插入路由器。</li></ul><h3 id="2-SSH-登录路由器"><a href="#2-SSH-登录路由器" class="headerlink" title="2. SSH 登录路由器"></a>2. SSH 登录路由器</h3><p>使用 SSH 工具（如 PuTTY 或终端）连接至路由器：</p><ul><li>主机地址：<code>192.168.31.1</code></li><li>用户名：<code>root</code></li><li>密码：使用小米平台提供的 SSH 密码</li></ul><h3 id="3-刷入-Breed"><a href="#3-刷入-Breed" class="headerlink" title="3. 刷入 Breed"></a>3. 刷入 Breed</h3><p>确认 U 盘路径为 <code>/extdisks/sda1</code>，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write -r /extdisks/sda1/Breed/breed-mt7621-xiaomi-r3g.bin Bootloader</span><br></pre></td></tr></table></figure><p>等待系统自动重启。</p><h3 id="4-验证是否刷入成功"><a href="#4-验证是否刷入成功" class="headerlink" title="4. 验证是否刷入成功"></a>4. 验证是否刷入成功</h3><p>重启后访问 <a href="http://192.168.1.1/">http://192.168.1.1</a>，若进入 Breed Web 界面，则刷写成功。若无法进入，请尝试：</p><ul><li>断电</li><li>按住 Reset 键</li><li>接通电源等待指示灯状态变化，进入 Breed 恢复模式</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/38df450d8e8f015157c065c311efd62b.png/blog" alt="Breed Web 恢复控制台"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>注意：刷机有风险，请谨慎操作并提前备份原始固件。</p><p>文章参考：<a href="%5Bhttps://%5D(https://clockworkmonkeystudio.com/2024/03/16/XiaoMiR3G/)">https://clockworkmonkeystudio.com/2024/03/16/XiaoMiR3G/</a></p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文详细介绍了如何为小米 R3G 路由器刷入 Breed 启动引导，包括官方固件刷入、SSH 权限申请、写入 Breed 文件以及刷入与验证步骤，帮助用户顺利完成刷机准备工作。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/categories/OpenWrt/"/>
    
    
    <category term="OpenWrt " scheme="https://blog.osyb.cn/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>随身 WiFi 通过 USB 接入 OpenWrt 路由器共享网络却不能访问 IPv6 网站的解决方法（NAT6 版）</title>
    <link href="https://blog.osyb.cn/posts/wz-4/"/>
    <id>https://blog.osyb.cn/posts/wz-4/</id>
    <published>2025-06-26T10:56:53.081Z</published>
    <updated>2025-07-26T10:19:01.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候，我们通过随身 WiFi（如 USB 网卡）将路由器连接至外部网络后，虽然 <code>wan6</code> 接口成功获取了 IPv6 地址，但下游设备却无法访问 IPv6 网站。</p><p>如果你的网络环境不支持 IPv6 前缀委派（PD），这时可以考虑使用一种折中的方案 —— <strong>NAT6</strong>，即将 IPv6 网络做 SNAT 转换，以绕过 PD 限制，从而实现 IPv6 访问。</p><p>本文将介绍如何基于 OpenWrt 设置 NAT6，以实现 IPv6 网络访问。</p><hr><h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h3 id="第一步：关闭-IPv6-源路由"><a href="#第一步：关闭-IPv6-源路由" class="headerlink" title="第一步：关闭 IPv6 源路由"></a>第一步：关闭 IPv6 源路由</h3><p>进入 OpenWrt Web 管理后台：</p><ul><li>点击 <code>网络</code> → <code>接口</code> → <code>wan6</code> → <code>编辑</code> → <code>高级设置</code></li><li>关闭 <strong>IPv6 源路由</strong>（防止意外路由泄露）</li></ul><p><img src="https://cdn.osyb.cn/img/2025/06/25ec3ad221c5d032c351766a1e30296f.png/blog" alt="关闭 IPv6 源路由"></p><hr><h3 id="第二步：修改-LAN-接口默认路由器通告"><a href="#第二步：修改-LAN-接口默认路由器通告" class="headerlink" title="第二步：修改 LAN 接口默认路由器通告"></a>第二步：修改 LAN 接口默认路由器通告</h3><ul><li>点击 <code>网络</code> → <code>接口</code> → <code>lan</code> → <code>编辑</code> → <code>DHCP 服务器</code> → <code>IPv6 RA 设置</code></li><li>修改 <strong>默认路由器</strong> 为 <strong>强制的</strong>（确保设备使用路由器的 IPv6 出口）</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/95f5428103d6180e3e79047b473f47a8.png/blog" alt="修改 LAN 接口默认路由器通告"></p><hr><h3 id="第三步：启用-IPv6-伪装（NAT6-核心）"><a href="#第三步：启用-IPv6-伪装（NAT6-核心）" class="headerlink" title="第三步：启用 IPv6 伪装（NAT6 核心）"></a>第三步：启用 IPv6 伪装（NAT6 核心）</h3><ul><li>点击 <code>网络</code> → <code>防火墙</code> → <code>常规设置</code> → <code>区域</code> → <code>wan</code> → <code>编辑</code> → <code>高级设置</code></li><li>启用 <strong>IPv6 伪装</strong>（即 SNAT 类似功能）</li></ul><p><img src="https://cdn.osyb.cn/img/2025/07/95e66a97be7f6d2b4217bf142f668f69.png/blog" alt="启用 IPv6 伪装"></p><p>此功能从 <strong>OpenWrt 22.03</strong> 起默认支持。</p><hr><h2 id="验证是否生效"><a href="#验证是否生效" class="headerlink" title="验证是否生效"></a>验证是否生效</h2><p>执行以下命令测试 IPv6 连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping6 ipv6.google.com</span><br></pre></td></tr></table></figure><p>或访问：<a href="https://test-ipv6.com/">https://test-ipv6.com</a></p><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>NAT6 不是原生 IPv6，某些服务（如 P2P 或远程入站连接）可能不可用。</li><li>建议优先使用中继模式或原生 PD，如环境受限再使用 NAT6。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你所处的网络环境无法下发 IPv6 前缀（如部分校园网或 5G 通信壳），NAT6 是目前一个相对简单有效的 IPv6 解决方案。</p><hr><blockquote><p>📝 延伸阅读：<a href="https://blog.osyb.cn/posts/wz-12/">IPv6 中继配置教程</a></p></blockquote><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用，请勿用于任何非法用途。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">本文介绍了在 OpenWrt 系统中如何配置 NAT6（IPv6 网络伪装），解决无 IPv6 前缀委派（PD）环境下的 IPv6 访问问题，帮助用户实现稳定的 IPv6 网络连接。</summary>
    
    
    
    <category term="OpenWrt" scheme="https://blog.osyb.cn/categories/OpenWrt/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="OpenWrt " scheme="https://blog.osyb.cn/tags/OpenWrt/"/>
    
    <category term="随身WiFi" scheme="https://blog.osyb.cn/tags/%E9%9A%8F%E8%BA%ABWiFi/"/>
    
    <category term="5G 通信壳" scheme="https://blog.osyb.cn/tags/5G-%E9%80%9A%E4%BF%A1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>postmarketOS 常用命令</title>
    <link href="https://blog.osyb.cn/posts/wz-3/"/>
    <id>https://blog.osyb.cn/posts/wz-3/</id>
    <published>2025-06-22T14:06:27.246Z</published>
    <updated>2025-07-29T22:39:01.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、图形用户界面"><a href="#一、图形用户界面" class="headerlink" title="一、图形用户界面"></a>一、图形用户界面</h2><h3 id="关闭图形用户界面"><a href="#关闭图形用户界面" class="headerlink" title="关闭图形用户界面"></a>关闭图形用户界面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rc-update del tinydm</span><br></pre></td></tr></table></figure><h3 id="开启图形用户界面"><a href="#开启图形用户界面" class="headerlink" title="开启图形用户界面"></a>开启图形用户界面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rc-update add tinydm default</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、图形用户界面&quot;&gt;&lt;a href=&quot;#一、图形用户界面&quot; class=&quot;headerlink&quot; title=&quot;一、图形用户界面&quot;&gt;&lt;/a&gt;一、图形用户界面&lt;/h2&gt;&lt;h3 id=&quot;关闭图形用户界面&quot;&gt;&lt;a href=&quot;#关闭图形用户界面&quot; class=&quot;head</summary>
      
    
    
    
    <category term="记录" scheme="https://blog.osyb.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="postmarketOS" scheme="https://blog.osyb.cn/tags/postmarketOS/"/>
    
  </entry>
  
  <entry>
    <title>Qexo 使用 DogeCloud 云存储作为图床</title>
    <link href="https://blog.osyb.cn/posts/wz-2/"/>
    <id>https://blog.osyb.cn/posts/wz-2/</id>
    <published>2025-06-17T14:35:09.414Z</published>
    <updated>2025-07-26T10:20:21.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建储存空间"><a href="#一、创建储存空间" class="headerlink" title="一、创建储存空间"></a>一、创建储存空间</h2><p>在 <a href="https://console.dogecloud.com/oss/list">DogeCloud</a> 创建一个储存空间，选择标准型（基础型不支持使用 SDK 和 API 上传&#x2F;管理文件）<br><img src="https://cdn.osyb.cn/img/2025/06/c65dc3cf49b57c95059f4f013a674d7f.png/blog"></p><h2 id="二、获取储存空间的-SDK-参数"><a href="#二、获取储存空间的-SDK-参数" class="headerlink" title="二、获取储存空间的 SDK 参数"></a>二、获取储存空间的 SDK 参数</h2><p>打开刚刚创建的储存空间，点击 <code>SDK 参数</code> ，这里我们需要 <code>s3Bucket</code> 和 <code>s3Endpoint</code></p><p><img src="https://cdn.osyb.cn/img/2025/06/072834c906e0001127e83b700dbc7c69.png/blog"></p><h2 id="三、获取密钥信息"><a href="#三、获取密钥信息" class="headerlink" title="三、获取密钥信息"></a>三、获取密钥信息</h2><p>点击 <code>右上角</code>-<code>用户中心</code>-<code>密钥管理</code>，然后根据提示获取密钥（AccessKey &#x2F; SecretKey）</p><p><img src="https://cdn.osyb.cn/img/2025/06/d00003112cb09eae818db37c7df09819.png/blog"></p><p><img src="https://cdn.osyb.cn/img/2025/06/4504c39db8dd895b740cce3c8090744a.png/blog"></p><h2 id="四、配置Qexo"><a href="#四、配置Qexo" class="headerlink" title="四、配置Qexo"></a>四、配置Qexo</h2><p>为了方便演示使用测试数据：<br>AccessKey：3aea5a07hkk6dd167<br>Secretkey：a8ed57e46376ldfhakfte442a21604<br>s3Bucket：s-gz-6666-yuban-xxx-123456789<br>s3Endpoint：<a href="https://cos.ap-xxx.myqcloud.com/">https://cos.ap-xxx.myqcloud.com</a></p><p>在Qexo的设置里，找到图床配置：<br>图床类型：<code>DogeCloud云存储</code><br>DogeCloud_Accesskey：<code>3aea5a07hkk6dd167</code><br>DogeCloud_Secretkey：<code>a8ed57e46376ldfhakfte442a21604</code><br>储存桶名：<code>上传图片的一级目录</code><br>边缘节点：<code>https://s-xx-6666-yuban-xxx-123456789.cos.ap-xxx.myqcloud.com</code><br>保存路径：<a href="https://www.oplog.cn/qexo/configs/upload.html#%E4%BF%9D%E5%AD%98%E8%B7%AF%E5%BE%84">官方文档</a><br>自定义域名：<code>https://储存空间域名/储存桶名/保存路径</code></p><blockquote><p>按道理说储存桶名填 s3Bucket，边缘节点填 s3Endpoint，但是我这样弄了上传图片会报错</p></blockquote><p><img src="https://cdn.osyb.cn/img/2025/06/466d42b66865812f969dbc54d2561bd9.png/blog"></p><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h2><p>在Qexo里面上传一张图片测试，可以看到我的图片链接是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.osyb.cn/img/2025/06/07142d4073fb43a5ad9943e3f9c27d25.png</span><br></pre></td></tr></table></figure><p><img src="https://cdn.osyb.cn/img/2025/06/02143b6dd88a361cf58fd042d22cd117.png/blog"></p><h2 id="六、最后"><a href="#六、最后" class="headerlink" title="六、最后"></a>六、最后</h2><p>我现在用的Qexo版本是 <code>3.6.0</code>，其他版本我没尝试过，不过参数就那么几个，多测试一下就好了</p><hr><blockquote><p>⚠️ <strong>免责声明</strong>：本文仅供个人学习与技术研究使用。</p></blockquote>]]></content>
    
    
    <summary type="html">本文详细介绍了如何在 DogeCloud 创建存储空间，获取 SDK 参数和密钥，并在 Qexo 图床中正确配置，实现图片上传和管理。适合需要结合 DogeCloud 和 Qexo 搭建私有图床的用户参考。</summary>
    
    
    
    <category term="教程" scheme="https://blog.osyb.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/categories/Hexo/"/>
    
    
    <category term="爱折腾" scheme="https://blog.osyb.cn/tags/%E7%88%B1%E6%8A%98%E8%85%BE/"/>
    
    <category term="Hexo" scheme="https://blog.osyb.cn/tags/Hexo/"/>
    
    <category term="教程" scheme="https://blog.osyb.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Qexo" scheme="https://blog.osyb.cn/tags/Qexo/"/>
    
  </entry>
  
</feed>
